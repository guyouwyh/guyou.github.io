<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>努力走,走到灯火通明</title>
  
  
  <link href="https://guyouwyh.github.io/guyouwyh/atom.xml" rel="self"/>
  
  <link href="https://guyouwyh.github.io/guyouwyh/"/>
  <updated>2022-04-17T11:15:48.544Z</updated>
  <id>https://guyouwyh.github.io/guyouwyh/</id>
  
  <author>
    <name>故犹</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【力扣】318. 最大单词长度乘积</title>
    <link href="https://guyouwyh.github.io/guyouwyh/2022/04/17/%E7%AE%97%E6%B3%95/%E4%BD%8D%E8%BF%90%E7%AE%97/%E6%9C%80%E5%A4%A7%E5%8D%95%E8%AF%8D%E9%95%BF%E5%BA%A6%E4%B9%98%E7%A7%AF/"/>
    <id>https://guyouwyh.github.io/guyouwyh/2022/04/17/%E7%AE%97%E6%B3%95/%E4%BD%8D%E8%BF%90%E7%AE%97/%E6%9C%80%E5%A4%A7%E5%8D%95%E8%AF%8D%E9%95%BF%E5%BA%A6%E4%B9%98%E7%A7%AF/</id>
    <published>2022-04-17T11:12:29.798Z</published>
    <updated>2022-04-17T11:15:48.544Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a class="anchor" href="#题目链接">#</a> 题目链接</h1><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbWF4aW11bS1wcm9kdWN0LW9mLXdvcmQtbGVuZ3Rocy8=">https://leetcode-cn.com/problems/maximum-product-of-word-lengths/</span></p><h1 id="思路分析"><a class="anchor" href="#思路分析">#</a> 思路分析</h1><p>由于字母只有小写字母，26 个，按照 int 类型来说，有 32 位，我们可以把每个单词的每个字母作为这个单词的一位，如果最后两个单词的位相与为 0, 就可以记录两个单词长度的最大值。比如一个单词如果为 &quot;ab&quot;, 那么应该表示为 <code>0b11</code> , 如果是 &quot;ac&quot;, 应该表示为 <code>0b101</code> 。</p><h1 id="ac代码"><a class="anchor" href="#ac代码">#</a> AC 代码</h1><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxProduct</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> words<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token keyword">int</span> n<span class="token operator">=</span> words<span class="token punctuation">.</span>length<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>                a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">|=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token keyword">int</span> len<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        </pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>                    len<span class="token operator">=</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span>words<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token keyword">return</span> len<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目链接&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#题目链接&quot;&gt;#&lt;/a&gt; 题目链接&lt;/h1&gt;
&lt;p&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvb</summary>
      
    
    
    
    <category term="算法" scheme="https://guyouwyh.github.io/guyouwyh/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="位运算" scheme="https://guyouwyh.github.io/guyouwyh/categories/%E7%AE%97%E6%B3%95/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
    
    <category term="位运算" scheme="https://guyouwyh.github.io/guyouwyh/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>【力扣】684. 冗余连接</title>
    <link href="https://guyouwyh.github.io/guyouwyh/2022/04/17/%E7%AE%97%E6%B3%95/%E5%B9%B6%E6%9F%A5%E9%9B%86/%E5%86%97%E4%BD%99%E8%BF%9E%E6%8E%A5/"/>
    <id>https://guyouwyh.github.io/guyouwyh/2022/04/17/%E7%AE%97%E6%B3%95/%E5%B9%B6%E6%9F%A5%E9%9B%86/%E5%86%97%E4%BD%99%E8%BF%9E%E6%8E%A5/</id>
    <published>2022-04-17T07:53:35.493Z</published>
    <updated>2022-04-17T07:55:48.557Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a class="anchor" href="#题目链接">#</a> 题目链接</h1><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcmVkdW5kYW50LWNvbm5lY3Rpb24v">https://leetcode-cn.com/problems/redundant-connection/</span></p><h1 id="思路分析"><a class="anchor" href="#思路分析">#</a> 思路分析</h1><p>可是使用并查集，遍历边，如果当前边的两个顶点还没处于同一个集合，就可以合并，如果已经处于同一个集合了，就说明当前边是一个冗余边。</p><h1 id="ac代码"><a class="anchor" href="#ac代码">#</a> AC 代码</h1><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">int</span> fa<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">void</span> init <span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        fa<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            fa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token keyword">int</span> x1<span class="token operator">=</span><span class="token function">findx</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token keyword">int</span> y1<span class="token operator">=</span><span class="token function">findx</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>x1<span class="token operator">!=</span>y1<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>            fa<span class="token punctuation">[</span>x1<span class="token punctuation">]</span><span class="token operator">=</span>y1<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findx</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">!=</span>fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre>            fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">findx</span><span class="token punctuation">(</span>fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token keyword">return</span> fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">findRedundantConnection</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> edges<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token function">init</span><span class="token punctuation">(</span>edges<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> edge<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> edges<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>            <span class="token comment">// 先判断是否处于一个集合中，即两个点是否已经连接</span></pre></td></tr><tr><td data-num="29"></td><td><pre>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">findx</span><span class="token punctuation">(</span>edge<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token function">findx</span><span class="token punctuation">(</span>edge<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>                <span class="token function">merge</span><span class="token punctuation">(</span>edge<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>edge<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>            <span class="token comment">// 如果已经处于同一个集合，那么这条边就是冗余的边。直接返回</span></pre></td></tr><tr><td data-num="34"></td><td><pre>            <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>edge<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>edge<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目链接&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#题目链接&quot;&gt;#&lt;/a&gt; 题目链接&lt;/h1&gt;
&lt;p&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc</summary>
      
    
    
    
    <category term="算法" scheme="https://guyouwyh.github.io/guyouwyh/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="并查集" scheme="https://guyouwyh.github.io/guyouwyh/categories/%E7%AE%97%E6%B3%95/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
    
    <category term="并查集" scheme="https://guyouwyh.github.io/guyouwyh/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>【力扣】207. 课程表</title>
    <link href="https://guyouwyh.github.io/guyouwyh/2022/04/17/%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/207.%20%E8%AF%BE%E7%A8%8B%E8%A1%A8/"/>
    <id>https://guyouwyh.github.io/guyouwyh/2022/04/17/%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/207.%20%E8%AF%BE%E7%A8%8B%E8%A1%A8/</id>
    <published>2022-04-17T07:12:21.279Z</published>
    <updated>2022-04-17T07:15:55.032Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a class="anchor" href="#题目链接">#</a> 题目链接</h1><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvY291cnNlLXNjaGVkdWxlLw==">https://leetcode-cn.com/problems/course-schedule/</span></p><h1 id="思路分析"><a class="anchor" href="#思路分析">#</a> 思路分析</h1><p>判断是否可能完成所有课程，除非两门课程循环依赖，即图中存在环，因此问题可以转换为判断是否出现环，最常用的解法就是拓扑排序，先遍历每一条边，统计各个点的入度，将入队为 0 的点放入队列，然后取出队列中的点进行广搜，将与之相连的点的入度都 - 1, 如果入度为 0 就放入队列，每一次出队都记录次数，最后比较出队次数与点的个数是否一致，就可以判断有没有环了。</p><h1 id="ac代码"><a class="anchor" href="#ac代码">#</a> AC 代码</h1><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>     <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Edge</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token keyword">int</span> v<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">int</span> next<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">int</span> head<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token class-name">Edge</span><span class="token punctuation">[</span><span class="token punctuation">]</span> edge<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        head<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span> <span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>       edge <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Edge</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">int</span> tot<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token comment">// 链式前向星建图</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        edge<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Edge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        edge<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span>v<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        edge<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token operator">=</span>head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>tot<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">canFinish</span><span class="token punctuation">(</span><span class="token keyword">int</span> numCourses<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prerequisites<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>prerequisites<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token function">init</span><span class="token punctuation">(</span>numCourses<span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token keyword">int</span> inDegree<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span> <span class="token punctuation">[</span>numCourses<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>prerequisites<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>            inDegree<span class="token punctuation">[</span>prerequisites<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>            <span class="token function">add</span><span class="token punctuation">(</span>prerequisites<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>prerequisites<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>        <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> queue<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numCourses<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="34"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>            <span class="token keyword">if</span><span class="token punctuation">(</span>inDegree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>        <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="39"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>            <span class="token keyword">int</span> x<span class="token operator">=</span>queue<span class="token punctuation">.</span><span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>            ans<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>head<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">=</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="43"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>                inDegree<span class="token punctuation">[</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>                <span class="token keyword">if</span><span class="token punctuation">(</span>inDegree<span class="token punctuation">[</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="46"></td><td><pre>                <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>                    queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>        <span class="token keyword">return</span> ans<span class="token operator">==</span>numCourses<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目链接&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#题目链接&quot;&gt;#&lt;/a&gt; 题目链接&lt;/h1&gt;
&lt;p&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvY</summary>
      
    
    
    
    <category term="算法" scheme="https://guyouwyh.github.io/guyouwyh/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="图论" scheme="https://guyouwyh.github.io/guyouwyh/categories/%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/"/>
    
    
    <category term="拓扑排序" scheme="https://guyouwyh.github.io/guyouwyh/tags/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>【力扣】785. 判断二分图</title>
    <link href="https://guyouwyh.github.io/guyouwyh/2022/04/16/%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E5%88%A4%E6%96%AD%E4%BA%8C%E5%88%86%E5%9B%BE/"/>
    <id>https://guyouwyh.github.io/guyouwyh/2022/04/16/%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E5%88%A4%E6%96%AD%E4%BA%8C%E5%88%86%E5%9B%BE/</id>
    <published>2022-04-16T07:49:37.747Z</published>
    <updated>2022-04-16T08:03:38.978Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a class="anchor" href="#题目链接">#</a> 题目链接</h1><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvaXMtZ3JhcGgtYmlwYXJ0aXRlLw==">https://leetcode-cn.com/problems/is-graph-bipartite/</span></p><h1 id="思路分析"><a class="anchor" href="#思路分析">#</a> 思路分析</h1><h2 id="深搜"><a class="anchor" href="#深搜">#</a> 深搜</h2><p>判断二分图可以采用染色法，相邻的点染不同的颜色，如果发现相邻的点染了同一种颜色，说明不能构成二分图。</p><h2 id="并查集"><a class="anchor" href="#并查集">#</a> 并查集</h2><p>遍历每个点，将与该点相邻的点放入同一个集合中，如果发现相邻的点与当前顶点处于同一个集合中，就说明不是二分图。</p><h1 id="ac代码"><a class="anchor" href="#ac代码">#</a> AC 代码</h1><h2 id="深搜-2"><a class="anchor" href="#深搜-2">#</a> 深搜</h2><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">int</span> flag<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> graph<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> c<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token comment">// 如果没有染色，判断是否和当前要染的颜色一样</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> flag<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span>c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token comment">// 染色</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        flag<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token comment">// 继续将相邻节点染色</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>graph<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">dfs</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span>graph<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token operator">-</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isBipartite</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> graph<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token keyword">int</span> n<span class="token operator">=</span>graph<span class="token punctuation">.</span>length<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token keyword">int</span> m<span class="token operator">=</span>graph<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        </pre></td></tr><tr><td data-num="23"></td><td><pre>        flag<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>                <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre>                <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">dfs</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre></pre></td></tr><tr><td data-num="31"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>        </pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="并查集-2"><a class="anchor" href="#并查集-2">#</a> 并查集</h2><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">int</span> fa<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            fa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findx</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">!=</span>fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>            fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">findx</span><span class="token punctuation">(</span>fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token keyword">return</span> fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token keyword">int</span> x1<span class="token operator">=</span><span class="token function">findx</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token keyword">int</span> y1<span class="token operator">=</span><span class="token function">findx</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>x1<span class="token operator">!=</span>y1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>            fa<span class="token punctuation">[</span>x1<span class="token punctuation">]</span><span class="token operator">=</span>y1<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isBipartite</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> graph<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        fa<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>graph<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token function">init</span><span class="token punctuation">(</span>graph<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        <span class="token keyword">int</span> n<span class="token operator">=</span>graph<span class="token punctuation">.</span>length<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>        <span class="token keyword">int</span> m<span class="token operator">=</span>graph<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>graph<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>                <span class="token comment">// 与当前顶点不在一个集合</span></pre></td></tr><tr><td data-num="34"></td><td><pre>                <span class="token keyword">if</span><span class="token punctuation">(</span>fa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>fa<span class="token punctuation">[</span>graph<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="35"></td><td><pre>                <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>                    <span class="token comment">// 合并</span></pre></td></tr><tr><td data-num="37"></td><td><pre>                    <span class="token function">merge</span><span class="token punctuation">(</span>graph<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>graph<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>                <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>        </pre></td></tr><tr><td data-num="46"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目链接&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#题目链接&quot;&gt;#&lt;/a&gt; 题目链接&lt;/h1&gt;
&lt;p&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMva</summary>
      
    
    
    
    <category term="算法" scheme="https://guyouwyh.github.io/guyouwyh/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="图论" scheme="https://guyouwyh.github.io/guyouwyh/categories/%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/"/>
    
    
    <category term="dfs" scheme="https://guyouwyh.github.io/guyouwyh/tags/dfs/"/>
    
    <category term="并查集" scheme="https://guyouwyh.github.io/guyouwyh/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
    <category term="二分图" scheme="https://guyouwyh.github.io/guyouwyh/tags/%E4%BA%8C%E5%88%86%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>769. 最多能完成排序的块</title>
    <link href="https://guyouwyh.github.io/guyouwyh/2022/04/16/%E7%AE%97%E6%B3%95/%E5%8D%95%E8%B0%83%E6%A0%88/%E6%9C%80%E5%A4%9A%E8%83%BD%E5%AE%8C%E6%88%90%E6%8E%92%E5%BA%8F%E7%9A%84%E5%9D%97/"/>
    <id>https://guyouwyh.github.io/guyouwyh/2022/04/16/%E7%AE%97%E6%B3%95/%E5%8D%95%E8%B0%83%E6%A0%88/%E6%9C%80%E5%A4%9A%E8%83%BD%E5%AE%8C%E6%88%90%E6%8E%92%E5%BA%8F%E7%9A%84%E5%9D%97/</id>
    <published>2022-04-16T06:32:50.068Z</published>
    <updated>2022-04-16T06:50:54.520Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a class="anchor" href="#题目链接">#</a> 题目链接</h1><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbWF4LWNodW5rcy10by1tYWtlLXNvcnRlZC8=">https://leetcode-cn.com/problems/max-chunks-to-make-sorted/</span></p><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbWF4LWNodW5rcy10by1tYWtlLXNvcnRlZC1paS8=">https://leetcode-cn.com/problems/max-chunks-to-make-sorted-ii/</span></p><h1 id="思路分析"><a class="anchor" href="#思路分析">#</a> 思路分析</h1><p>观察题目可以发现，一个块的最小值肯定比前一个块的最大值大。因此可以想到使用一个数据结果来维护每一个块的最大值。维护最大值和最小值的数据结构一般都是单调栈和单调队列。<br />这里使用单调栈，因为单调栈可以向前找，找到第一个比当前元素小的值，中间比当前元素大的值都可以和当前元素合并成一个快，即第一个比当前元素小的值其实是上一块的最大值。让那些比当前元素大的值出栈，然后再把当前块的最大值 (第一个出栈的元素) 入栈。</p><h1 id="ac代码"><a class="anchor" href="#ac代码">#</a> AC 代码</h1><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxChunksToSorted</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>     <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">int</span> max<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            <span class="token comment">// 这里是要记录当前块的最大值</span></pre></td></tr><tr><td data-num="7"></td><td><pre>           <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">></span>max<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>           <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>               max<span class="token operator">=</span>i<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>               stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>           <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>                <span class="token comment">// 如果入栈元素小于栈顶元素</span></pre></td></tr><tr><td data-num="14"></td><td><pre>                 <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>i<span class="token operator">&lt;</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>              <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>                  <span class="token comment">// 要将栈顶元素出栈</span></pre></td></tr><tr><td data-num="17"></td><td><pre>                  <span class="token comment">// 最后栈顶元素肯定是比入栈元素大的</span></pre></td></tr><tr><td data-num="18"></td><td><pre>                  <span class="token comment">// 这段代码里出栈的元素相当于都和入栈元素合并成一个块了</span></pre></td></tr><tr><td data-num="19"></td><td><pre>                stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>              <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>              <span class="token comment">// 由于 max 记录了当前块的最大值，因此需要将当前块最大值入栈。</span></pre></td></tr><tr><td data-num="22"></td><td><pre>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token comment">// 栈中维护了每个块的最大值，因此返回块的数量即可</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token keyword">return</span> stack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目链接&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#题目链接&quot;&gt;#&lt;/a&gt; 题目链接&lt;/h1&gt;
&lt;p&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvb</summary>
      
    
    
    
    <category term="算法" scheme="https://guyouwyh.github.io/guyouwyh/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="单调栈" scheme="https://guyouwyh.github.io/guyouwyh/categories/%E7%AE%97%E6%B3%95/%E5%8D%95%E8%B0%83%E6%A0%88/"/>
    
    
    <category term="单调栈" scheme="https://guyouwyh.github.io/guyouwyh/tags/%E5%8D%95%E8%B0%83%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>【力扣】565. 数组嵌套</title>
    <link href="https://guyouwyh.github.io/guyouwyh/2022/04/16/%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2/%E6%95%B0%E7%BB%84%E5%B5%8C%E5%A5%97/"/>
    <id>https://guyouwyh.github.io/guyouwyh/2022/04/16/%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2/%E6%95%B0%E7%BB%84%E5%B5%8C%E5%A5%97/</id>
    <published>2022-04-16T05:48:34.915Z</published>
    <updated>2022-04-16T05:51:13.019Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a class="anchor" href="#题目链接">#</a> 题目链接</h1><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvYXJyYXktbmVzdGluZy8=">https://leetcode-cn.com/problems/array-nesting/</span></p><h1 id="思路分析"><a class="anchor" href="#思路分析">#</a> 思路分析</h1><p>由于数组中不存在重复元素，并且都处于 <code>[1-n]</code>  之间，如果把数组的结果当做下一次访问的下标，最后数组一定会形成多个环。题目中的意思就是要求那个最大的环，因此可以使用深搜的思想，对于每个下标进行搜索，搜完就标记一下，如果下次搜索的时候碰到已经标记的，就直接退出。最后求出最大的环即可。</p><h1 id="ac代码"><a class="anchor" href="#ac代码">#</a> AC 代码</h1><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">arrayNesting</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">int</span> max<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            <span class="token keyword">int</span> cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            <span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            <span class="token comment">// 如果没有访问过</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            <span class="token keyword">while</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>                cnt<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>                <span class="token keyword">int</span> x<span class="token operator">=</span>j<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>                <span class="token comment">// 访问下一个</span></pre></td></tr><tr><td data-num="15"></td><td><pre>                j<span class="token operator">=</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>                <span class="token comment">// 标记当前的 j 已经访问过</span></pre></td></tr><tr><td data-num="17"></td><td><pre>                nums<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  </pre></td></tr><tr><td data-num="18"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>            max<span class="token operator">=</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span>cnt<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token keyword">return</span> max<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目链接&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#题目链接&quot;&gt;#&lt;/a&gt; 题目链接&lt;/h1&gt;
&lt;p&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvY</summary>
      
    
    
    
    <category term="算法" scheme="https://guyouwyh.github.io/guyouwyh/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="搜索" scheme="https://guyouwyh.github.io/guyouwyh/categories/%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2/"/>
    
    
    <category term="dfs" scheme="https://guyouwyh.github.io/guyouwyh/tags/dfs/"/>
    
  </entry>
  
  <entry>
    <title>【力扣】优美的排列 II</title>
    <link href="https://guyouwyh.github.io/guyouwyh/2022/04/16/%E7%AE%97%E6%B3%95/%E6%A8%A1%E6%8B%9F/%E4%BC%98%E7%BE%8E%E7%9A%84%E6%8E%92%E5%88%97II/"/>
    <id>https://guyouwyh.github.io/guyouwyh/2022/04/16/%E7%AE%97%E6%B3%95/%E6%A8%A1%E6%8B%9F/%E4%BC%98%E7%BE%8E%E7%9A%84%E6%8E%92%E5%88%97II/</id>
    <published>2022-04-16T04:54:05.964Z</published>
    <updated>2022-04-16T05:00:28.388Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a class="anchor" href="#题目链接">#</a> 题目链接</h1><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvYmVhdXRpZnVsLWFycmFuZ2VtZW50LWlpLw==">https://leetcode-cn.com/problems/beautiful-arrangement-ii/</span></p><h1 id="思路分析"><a class="anchor" href="#思路分析">#</a> 思路分析</h1><p>这题模拟题看似很难，但是只要发现规律，就会很简单，可以这么思考，要得到 k 个不同的整数，由于 <code>k&lt;n</code> , 可以得到 k-1 个不同的整数，剩下的 n-k-1 的数相差都是一样的，并且与 k-1 个整数不同。<br />可以交替取最小最大值，举个栗子: <code>[1,2,3,4,5]</code> 。如果 k=2, 那么可以排列成 <code>[1,5,4,3,2]</code> , 其中 1 和 5 相差 4, 剩余的都是相差 1, 符合 k=2。可以先使用双指针，l 指向 1,r 指向 n, 交替赋值，总共 k 次，然后根据 k 是否为偶数，如果为偶数，肯定要从后开始赋值。</p><h1 id="ac代码"><a class="anchor" href="#ac代码">#</a> AC 代码</h1><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">constructArray</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>     <span class="token keyword">int</span> res<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token operator">=</span>n<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>k<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            <span class="token comment">// 交替赋值</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">?</span>l<span class="token operator">++</span><span class="token operator">:</span>r<span class="token operator">--</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>k<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token comment">// 如果 k 为偶数，就从后开始赋值，这样可以让后面的数都相差为 1</span></pre></td></tr><tr><td data-num="13"></td><td><pre>            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">?</span>r<span class="token operator">--</span><span class="token operator">:</span>l<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token keyword">return</span> res<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目链接&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#题目链接&quot;&gt;#&lt;/a&gt; 题目链接&lt;/h1&gt;
&lt;p&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvY</summary>
      
    
    
    
    <category term="算法" scheme="https://guyouwyh.github.io/guyouwyh/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="模拟" scheme="https://guyouwyh.github.io/guyouwyh/categories/%E7%AE%97%E6%B3%95/%E6%A8%A1%E6%8B%9F/"/>
    
    
    <category term="模拟" scheme="https://guyouwyh.github.io/guyouwyh/tags/%E6%A8%A1%E6%8B%9F/"/>
    
  </entry>
  
  <entry>
    <title>【力扣】287. 寻找重复数</title>
    <link href="https://guyouwyh.github.io/guyouwyh/2022/04/16/%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/%E5%AF%BB%E6%89%BE%E9%87%8D%E5%A4%8D%E6%95%B0/"/>
    <id>https://guyouwyh.github.io/guyouwyh/2022/04/16/%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/%E5%AF%BB%E6%89%BE%E9%87%8D%E5%A4%8D%E6%95%B0/</id>
    <published>2022-04-16T03:10:20.233Z</published>
    <updated>2022-04-16T03:41:13.051Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a class="anchor" href="#题目链接">#</a> 题目链接</h1><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZmluZC10aGUtZHVwbGljYXRlLW51bWJlci8=">https://leetcode-cn.com/problems/find-the-duplicate-number/</span></p><h1 id="ac代码"><a class="anchor" href="#ac代码">#</a> AC 代码</h1><h2 id="二分答案"><a class="anchor" href="#二分答案">#</a> 二分答案</h2><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findDuplicate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>       <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>      <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token operator">=</span>n<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;</span>r<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            <span class="token keyword">int</span> mid<span class="token operator">=</span>l<span class="token operator">+</span>r<span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            <span class="token keyword">int</span> cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>                <span class="token comment">// 统计小于等于 mid 的个数</span></pre></td></tr><tr><td data-num="12"></td><td><pre>                <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>                    cnt<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>            <span class="token comment">// 如果个数比 mid 大，就说明重复区间在 [l,mid] 之间</span></pre></td></tr><tr><td data-num="16"></td><td><pre>            <span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token operator">></span>mid<span class="token punctuation">)</span> r<span class="token operator">=</span>mid<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>            <span class="token keyword">else</span> l<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token keyword">return</span> r<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="快慢指针"><a class="anchor" href="#快慢指针">#</a> 快慢指针</h2><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findDuplicate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token comment">// 慢指针，快指针</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">int</span> slow<span class="token operator">=</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">int</span> fast<span class="token operator">=</span>nums<span class="token punctuation">[</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token comment">// 找到快指针和慢指针相遇的地方，相遇必定在环里</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token comment">// 假设此时慢指针走的距离是 n, 快指针指的距离是 2n, 那么快指针比慢指针多走了 n</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token comment">// 实际上这个 n 肯定是在环里绕圈圈，设环长为 c, 那么 n% c==0</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token comment">// 假设起点到环的距离为 m,n% c==0 n-m 是慢指针在环中走的距离，即慢指针走 m 就到了环入口</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token comment">// 因此只需要在快慢指针相遇的时候，在弄一个指针从起点出发，与慢指针相遇位置就是环的入口</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        </pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token keyword">while</span><span class="token punctuation">(</span>slow<span class="token operator">!=</span>fast<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>            slow<span class="token operator">=</span>nums<span class="token punctuation">[</span>slow<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>            fast<span class="token operator">=</span>nums<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token keyword">int</span> finder<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token keyword">while</span><span class="token punctuation">(</span>finder<span class="token operator">!=</span>slow<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>            finder<span class="token operator">=</span>nums<span class="token punctuation">[</span>finder<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>            slow<span class="token operator">=</span>nums<span class="token punctuation">[</span>slow<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token keyword">return</span> slow<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目链接&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#题目链接&quot;&gt;#&lt;/a&gt; 题目链接&lt;/h1&gt;
&lt;p&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZ</summary>
      
    
    
    
    <category term="算法" scheme="https://guyouwyh.github.io/guyouwyh/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="二分查找" scheme="https://guyouwyh.github.io/guyouwyh/categories/%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    
    
    <category term="二分查找" scheme="https://guyouwyh.github.io/guyouwyh/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    
    <category term="快慢指针" scheme="https://guyouwyh.github.io/guyouwyh/tags/%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>【力扣】645. 错误的集合</title>
    <link href="https://guyouwyh.github.io/guyouwyh/2022/04/15/%E7%AE%97%E6%B3%95/%E4%BD%8D%E8%BF%90%E7%AE%97/%E9%94%99%E8%AF%AF%E7%9A%84%E9%9B%86%E5%90%88/"/>
    <id>https://guyouwyh.github.io/guyouwyh/2022/04/15/%E7%AE%97%E6%B3%95/%E4%BD%8D%E8%BF%90%E7%AE%97/%E9%94%99%E8%AF%AF%E7%9A%84%E9%9B%86%E5%90%88/</id>
    <published>2022-04-15T15:31:26.613Z</published>
    <updated>2022-04-15T15:36:12.609Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a class="anchor" href="#题目链接">#</a> 题目链接</h1><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc2V0LW1pc21hdGNoLw==">https://leetcode-cn.com/problems/set-mismatch/</span></p><h1 id="思路分析"><a class="anchor" href="#思路分析">#</a> 思路分析</h1><h2 id="哈希表"><a class="anchor" href="#哈希表">#</a> 哈希表</h2><p>使用数组记录出现次数，直接就可以得出来。</p><h2 id="位运算"><a class="anchor" href="#位运算">#</a> 位运算</h2><p>由于 nums 中有一个元素是不存在的，并且有一个元素是重复的，可以将 nums 和 1-n 所有数进行异或，最后得到的就是重复出现的数和丢失数的异或。然是使用 x&amp;=(-x), 可以得出最后一位 1, 即两个数在该位置不同。<br />然后定义两个数为 0, 分别在 nums 循环和 1-n 循环中，判断是否跟 x 相与等于 0, 如果为 0, 如果为 0 就进行异或，这样可以将两个数给区分开来。由于 nums 和 1-n 除了这里两个数外，其余的个数都是偶数个，因此使用上述方法可以将两个数区分开来。</p><h1 id="ac代码"><a class="anchor" href="#ac代码">#</a> AC 代码</h1><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">findErrorNums</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">int</span> n<span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">int</span> total<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>       x<span class="token operator">^=</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        x<span class="token operator">^=</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        total<span class="token operator">+=</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        x<span class="token operator">&amp;=</span><span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token keyword">int</span> n1<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>n2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>num<span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>          <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>             n1<span class="token operator">^=</span>num<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>          <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>            n2<span class="token operator">^=</span>num<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>         <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre>          <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>             n1<span class="token operator">^=</span>i<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>          <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>            n2<span class="token operator">^=</span>i<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>          <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token operator">:</span>nums<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="35"></td><td><pre>      <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>          <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">==</span>n1<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>n1<span class="token punctuation">,</span>n2<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>n2<span class="token punctuation">,</span>n1<span class="token punctuation">&#125;</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="39"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目链接&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#题目链接&quot;&gt;#&lt;/a&gt; 题目链接&lt;/h1&gt;
&lt;p&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc</summary>
      
    
    
    
    <category term="算法" scheme="https://guyouwyh.github.io/guyouwyh/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="位运算" scheme="https://guyouwyh.github.io/guyouwyh/categories/%E7%AE%97%E6%B3%95/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
    
    <category term="位运算" scheme="https://guyouwyh.github.io/guyouwyh/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>【力扣】 696. 计数二进制子串</title>
    <link href="https://guyouwyh.github.io/guyouwyh/2022/04/15/%E7%AE%97%E6%B3%95/%E6%A8%A1%E6%8B%9F/%E8%AE%A1%E6%95%B0%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AD%97%E4%B8%B2/"/>
    <id>https://guyouwyh.github.io/guyouwyh/2022/04/15/%E7%AE%97%E6%B3%95/%E6%A8%A1%E6%8B%9F/%E8%AE%A1%E6%95%B0%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AD%97%E4%B8%B2/</id>
    <published>2022-04-15T13:29:41.776Z</published>
    <updated>2022-04-15T13:34:12.175Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a class="anchor" href="#题目链接">#</a> 题目链接</h1><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvY291bnQtYmluYXJ5LXN1YnN0cmluZ3Mv">https://leetcode-cn.com/problems/count-binary-substrings/</span></p><h1 id="思路分析"><a class="anchor" href="#思路分析">#</a> 思路分析</h1><p>可以按字符分组，由于必须是 0 和 1 成组连续，我们可以先计算出连续 0 或者连续 1 的数量，如果碰到不连续的，肯定与之前连续的是对立的 (比如之前连续 1, 接下来是 0), 那么如果当前的连续数量比之前连续数量小，那么久说明出现了一个符合条件的字串。比如 <code>00011</code> , 遍历到第一个 1 的时候，前面的 0 出现了 3 次，1 出现 1 次，那么 01 算一种结果，然后 1 出现两次，0011 也算一种结果，知道之前一组的数量等于当前一组的数量。</p><h1 id="ac代码"><a class="anchor" href="#ac代码">#</a> AC 代码</h1><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">countBinarySubstrings</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token comment">// 前一个连续分组的数量 pre, 当前连续分组的数量 cur</span></pre></td></tr><tr><td data-num="4"></td><td><pre>       <span class="token keyword">int</span> pre<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>cur<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">==</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>                cur<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>                pre<span class="token operator">=</span>cur<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>                cur<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>            <span class="token keyword">if</span><span class="token punctuation">(</span>pre<span class="token operator">>=</span>cur<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>                ans<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目链接&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#题目链接&quot;&gt;#&lt;/a&gt; 题目链接&lt;/h1&gt;
&lt;p&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvY</summary>
      
    
    
    
    <category term="算法" scheme="https://guyouwyh.github.io/guyouwyh/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="模拟" scheme="https://guyouwyh.github.io/guyouwyh/categories/%E7%AE%97%E6%B3%95/%E6%A8%A1%E6%8B%9F/"/>
    
    
    <category term="字符串" scheme="https://guyouwyh.github.io/guyouwyh/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>【力扣】647. 回文子串</title>
    <link href="https://guyouwyh.github.io/guyouwyh/2022/04/15/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/"/>
    <id>https://guyouwyh.github.io/guyouwyh/2022/04/15/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/</id>
    <published>2022-04-15T12:53:06.937Z</published>
    <updated>2022-04-15T12:59:53.467Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a class="anchor" href="#题目链接">#</a> 题目链接</h1><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcGFsaW5kcm9taWMtc3Vic3RyaW5ncy8=">https://leetcode-cn.com/problems/palindromic-substrings/</span></p><h1 id="思路分析"><a class="anchor" href="#思路分析">#</a> 思路分析</h1><h2 id="动态规划"><a class="anchor" href="#动态规划">#</a> 动态规划</h2><p>求回文子串一般使用动态规划，可以很容易找出状态转移方程， <code>dp[i][j]=dp[i+1][j-1],s[i]==s[j]</code> . 那么转移顺序呢？可以看 (i,j) 和 (i+1,j-1) 之间的位置关系，从二维数组上可以看出，(i+1,j-1) 在 (i,j) 的左下角，要进行状态转译，就必须从下到上，从左到右遍历。</p><h2 id="中心扩散"><a class="anchor" href="#中心扩散">#</a> 中心扩散</h2><p>由于回文串的特性，可以枚举某一个点，然后从这个点进行扩散，可以知道一共需要枚举 <code>2*n-1</code>  个点，为什么呢？因此如果回文串长度是偶数，枚举一个点是得不到的，因此需要枚举两个点，即长度为 n 的字符串，首先需要枚举一个点，需要 n 次，然后枚举两个点，需要 n-1 次，因此 z 总次数为 <code>2*n-1</code>  次.</p><h1 id="ac代码"><a class="anchor" href="#ac代码">#</a> AC 代码</h1><h2 id="动态规划-2"><a class="anchor" href="#动态规划-2">#</a> 动态规划</h2><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">countSubstrings</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token keyword">int</span> n<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">boolean</span> dp<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>         <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>         <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>         <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>             <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>             <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>                 <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>j<span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;=</span><span class="token number">2</span><span class="token operator">||</span>dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>                 <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>                     ans<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>                     dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>                 <span class="token punctuation">&#125;</span>    </pre></td></tr><tr><td data-num="19"></td><td><pre>             <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>         <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="中心扩散-2"><a class="anchor" href="#中心扩散-2">#</a> 中心扩散</h2><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">countSubstrings</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token keyword">int</span> n<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            <span class="token comment">// 这里非常的巧妙，left/2, 连续两次结果一定是一样的</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            <span class="token keyword">int</span> left<span class="token operator">=</span>i<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            <span class="token comment">// 利用取余 %, 比如第一次是 (0,0), 第二次就是 (0,1)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            <span class="token keyword">int</span> right<span class="token operator">=</span>left<span class="token operator">+</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">>=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>right<span class="token operator">&lt;</span>n<span class="token operator">&amp;&amp;</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token operator">==</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>                ans<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>                left<span class="token operator">--</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>                right<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目链接&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#题目链接&quot;&gt;#&lt;/a&gt; 题目链接&lt;/h1&gt;
&lt;p&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc</summary>
      
    
    
    
    <category term="算法" scheme="https://guyouwyh.github.io/guyouwyh/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="动态规划" scheme="https://guyouwyh.github.io/guyouwyh/categories/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    
    <category term="dp" scheme="https://guyouwyh.github.io/guyouwyh/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>503. 下一个更大元素 II</title>
    <link href="https://guyouwyh.github.io/guyouwyh/2022/04/15/%E7%AE%97%E6%B3%95/%E5%8D%95%E8%B0%83%E6%A0%88/%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%9B%B4%E5%A4%A7%E5%85%83%E7%B4%A0%20II/"/>
    <id>https://guyouwyh.github.io/guyouwyh/2022/04/15/%E7%AE%97%E6%B3%95/%E5%8D%95%E8%B0%83%E6%A0%88/%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%9B%B4%E5%A4%A7%E5%85%83%E7%B4%A0%20II/</id>
    <published>2022-04-15T09:46:52.214Z</published>
    <updated>2022-04-15T09:50:26.483Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a class="anchor" href="#题目链接">#</a> 题目链接</h1><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbmV4dC1ncmVhdGVyLWVsZW1lbnQtaWkv">https://leetcode-cn.com/problems/next-greater-element-ii/</span></p><h1 id="思路分析"><a class="anchor" href="#思路分析">#</a> 思路分析</h1><p>这题与每日温度一题不同的是，求得是值，并且是循环数组，因此可以开两倍的数组空间，遍历 2n 次，只在前面 n 次才能入栈。</p><h1 id="ac代码"><a class="anchor" href="#ac代码">#</a> AC 代码</h1><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">nextGreaterElements</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>          <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span>  stack<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">int</span> n<span class="token operator">=</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">int</span> res<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token comment">// 如果只是 n 次遍历的话，例如 [5,4,3,2,1] 这种情况，就会得到错误的答案</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token comment">//2n 次遍历</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>nums<span class="token punctuation">[</span>i<span class="token operator">%</span>n<span class="token punctuation">]</span><span class="token operator">></span>nums<span class="token punctuation">[</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>                <span class="token keyword">int</span> x<span class="token operator">=</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>                res<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span>i<span class="token operator">%</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>            <span class="token comment">// 只能在前 n 次进行入栈操作，因为前 n 次入完栈后，剩下 n 次只是为了把找到栈中剩下元素的下一个更             大的元素。</span></pre></td></tr><tr><td data-num="17"></td><td><pre>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>       </pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>   </pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目链接&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#题目链接&quot;&gt;#&lt;/a&gt; 题目链接&lt;/h1&gt;
&lt;p&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvb</summary>
      
    
    
    
    <category term="算法" scheme="https://guyouwyh.github.io/guyouwyh/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="单调栈" scheme="https://guyouwyh.github.io/guyouwyh/categories/%E7%AE%97%E6%B3%95/%E5%8D%95%E8%B0%83%E6%A0%88/"/>
    
    
    <category term="单调栈" scheme="https://guyouwyh.github.io/guyouwyh/tags/%E5%8D%95%E8%B0%83%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>739.每日温度</title>
    <link href="https://guyouwyh.github.io/guyouwyh/2022/04/15/%E7%AE%97%E6%B3%95/%E5%8D%95%E8%B0%83%E6%A0%88/%E6%AF%8F%E6%97%A5%E6%B8%A9%E5%BA%A6/"/>
    <id>https://guyouwyh.github.io/guyouwyh/2022/04/15/%E7%AE%97%E6%B3%95/%E5%8D%95%E8%B0%83%E6%A0%88/%E6%AF%8F%E6%97%A5%E6%B8%A9%E5%BA%A6/</id>
    <published>2022-04-15T09:14:28.523Z</published>
    <updated>2022-04-15T09:22:28.033Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a class="anchor" href="#题目链接">#</a> 题目链接</h1><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZGFpbHktdGVtcGVyYXR1cmVzLw==">https://leetcode-cn.com/problems/daily-temperatures/</span></p><h1 id="思路分析"><a class="anchor" href="#思路分析">#</a> 思路分析</h1><p>这题如果把数组反转过来，可以将问题转换为 i 左边距离 i 最近的第一个比 i 大的数。即维护一个单调递减栈，如果 nums [i] 比栈顶元素大，就让栈顶元素出栈，栈顶元素的下一个元素就是与它距离最近的比他大的数，直接将差值存到 res 数组里。</p><h1 id="ac代码"><a class="anchor" href="#ac代码">#</a> AC 代码</h1><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span>  deque<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">dailyTemperatures</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temperatures<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>res<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>temperatures<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>     <span class="token keyword">int</span> n <span class="token operator">=</span> temperatures<span class="token punctuation">.</span>length<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token comment">// 逆序遍历，将问题转换为求第 i 个位置左边比它大的数的最短距离</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> temperatures<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            <span class="token keyword">if</span><span class="token punctuation">(</span>deque<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> deque<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>                <span class="token comment">// 如果要入栈的数大于栈顶的数，将栈顶的数移除，此时新栈顶的就是被移除数左边比他大的数，并且是距离最近的，因此直接将差值存入数组。</span></pre></td></tr><tr><td data-num="11"></td><td><pre>                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>deque<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>temperatures<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>=</span>temperatures<span class="token punctuation">[</span>deque<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>                <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>                   <span class="token keyword">int</span> x<span class="token operator">=</span> deque<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>                   <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>deque<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>                   res<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>deque<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>x<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>                deque<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token comment">// 如果最后栈顶不为空，继续赋值</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>deque<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>            <span class="token keyword">int</span> x<span class="token operator">=</span> deque<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>deque<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre>                res<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>deque<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>x<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        <span class="token keyword">return</span> res<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目链接&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#题目链接&quot;&gt;#&lt;/a&gt; 题目链接&lt;/h1&gt;
&lt;p&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZ</summary>
      
    
    
    
    <category term="算法" scheme="https://guyouwyh.github.io/guyouwyh/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="单调栈" scheme="https://guyouwyh.github.io/guyouwyh/categories/%E7%AE%97%E6%B3%95/%E5%8D%95%E8%B0%83%E6%A0%88/"/>
    
    
    <category term="单调栈" scheme="https://guyouwyh.github.io/guyouwyh/tags/%E5%8D%95%E8%B0%83%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>【力扣】677.键值映射</title>
    <link href="https://guyouwyh.github.io/guyouwyh/2022/04/15/%E7%AE%97%E6%B3%95/%E9%80%92%E6%8E%A8%E4%B8%8E%E9%80%92%E5%BD%92/%E9%94%AE%E5%80%BC%E6%98%A0%E5%B0%84/"/>
    <id>https://guyouwyh.github.io/guyouwyh/2022/04/15/%E7%AE%97%E6%B3%95/%E9%80%92%E6%8E%A8%E4%B8%8E%E9%80%92%E5%BD%92/%E9%94%AE%E5%80%BC%E6%98%A0%E5%B0%84/</id>
    <published>2022-04-15T03:28:30.030Z</published>
    <updated>2022-04-15T03:31:37.956Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a class="anchor" href="#题目链接">#</a> 题目链接</h1><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbWFwLXN1bS1wYWlycy8=">https://leetcode-cn.com/problems/map-sum-pairs/</span></p><h1 id="思路分析"><a class="anchor" href="#思路分析">#</a> 思路分析</h1><p>这里可以建立一个前缀树，在每个字符串最末尾的节点存储值，然后递归求和，当到前缀的最尾部的时候，将之后的节点全部相加。</p><h1 id="ac代码"><a class="anchor" href="#ac代码">#</a> AC 代码</h1><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">MapSum</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">Node</span> root<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token class-name">Node</span> child<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">int</span> val<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">public</span> <span class="token class-name">MapSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        root<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    </pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>         <span class="token function">insert</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>val<span class="token punctuation">,</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span><span class="token keyword">int</span> val<span class="token punctuation">,</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        </pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>            node<span class="token punctuation">.</span>val<span class="token operator">=</span>val<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>            <span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token keyword">int</span> idx<span class="token operator">=</span><span class="token function">getDigital</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>child<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> node<span class="token punctuation">.</span>child<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token function">insert</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>val<span class="token punctuation">,</span>node<span class="token punctuation">.</span>child<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    </pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token class-name">String</span> prefix<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        <span class="token keyword">return</span> <span class="token function">sum</span><span class="token punctuation">(</span>prefix<span class="token punctuation">,</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>   </pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token class-name">String</span> prefix<span class="token punctuation">,</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>prefix<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="35"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>            <span class="token keyword">int</span> idx<span class="token operator">=</span><span class="token function">getDigital</span><span class="token punctuation">(</span>prefix<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>            <span class="token keyword">return</span> <span class="token function">sum</span><span class="token punctuation">(</span>prefix<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>node<span class="token punctuation">.</span>child<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>        </pre></td></tr><tr><td data-num="40"></td><td><pre>        <span class="token keyword">int</span> total<span class="token operator">=</span>node<span class="token punctuation">.</span>val<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>        <span class="token comment">// 递归调用，将之后的节点相加</span></pre></td></tr><tr><td data-num="42"></td><td><pre>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Node</span> n <span class="token operator">:</span> node<span class="token punctuation">.</span>child<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="43"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>            <span class="token comment">// 这里 prefix 必定为 null, 因此后面就是递归的求和了</span></pre></td></tr><tr><td data-num="45"></td><td><pre>            total<span class="token operator">+=</span><span class="token function">sum</span><span class="token punctuation">(</span>prefix<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>        <span class="token keyword">return</span> total<span class="token punctuation">;</span>    </pre></td></tr><tr><td data-num="48"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getDigital</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="50"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>        <span class="token keyword">return</span> c<span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="54"></td><td><pre></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="56"></td><td><pre> * Your MapSum object will be instantiated and called as such:</pre></td></tr><tr><td data-num="57"></td><td><pre> * MapSum obj = new MapSum();</pre></td></tr><tr><td data-num="58"></td><td><pre> * obj.insert(key,val);</pre></td></tr><tr><td data-num="59"></td><td><pre> * int param_2 = obj.sum(prefix);</pre></td></tr><tr><td data-num="60"></td><td><pre> */</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目链接&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#题目链接&quot;&gt;#&lt;/a&gt; 题目链接&lt;/h1&gt;
&lt;p&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvb</summary>
      
    
    
    
    <category term="算法" scheme="https://guyouwyh.github.io/guyouwyh/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="递推与递归" scheme="https://guyouwyh.github.io/guyouwyh/categories/%E7%AE%97%E6%B3%95/%E9%80%92%E6%8E%A8%E4%B8%8E%E9%80%92%E5%BD%92/"/>
    
    
    <category term="字典树" scheme="https://guyouwyh.github.io/guyouwyh/tags/%E5%AD%97%E5%85%B8%E6%A0%91/"/>
    
    <category term="前缀树" scheme="https://guyouwyh.github.io/guyouwyh/tags/%E5%89%8D%E7%BC%80%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>【力扣】208. 实现 Trie (前缀树)</title>
    <link href="https://guyouwyh.github.io/guyouwyh/2022/04/14/%E7%AE%97%E6%B3%95/%E9%80%92%E6%8E%A8%E4%B8%8E%E9%80%92%E5%BD%92/%E5%AD%97%E5%85%B8%E6%A0%91/"/>
    <id>https://guyouwyh.github.io/guyouwyh/2022/04/14/%E7%AE%97%E6%B3%95/%E9%80%92%E6%8E%A8%E4%B8%8E%E9%80%92%E5%BD%92/%E5%AD%97%E5%85%B8%E6%A0%91/</id>
    <published>2022-04-14T12:22:09.159Z</published>
    <updated>2022-04-14T12:46:51.539Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a class="anchor" href="#题目链接">#</a> 题目链接</h1><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvaW1wbGVtZW50LXRyaWUtcHJlZml4LXRyZWUv">https://leetcode-cn.com/problems/implement-trie-prefix-tree/</span></p><h1 id="思路分析"><a class="anchor" href="#思路分析">#</a> 思路分析</h1><p>前缀树是利用空间换时间，每个节点有 26 个孩子节点，从 0-25 分别对应 a-z, 差点找的时间复杂度是 O (h) 树的高度，也就是字符串的最大长度。</p><h1 id="ac代码"><a class="anchor" href="#ac代码">#</a> AC 代码</h1><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Trie</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    </pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Node</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token comment">// 根节点下有 26 个字母节点</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token class-name">Node</span><span class="token punctuation">[</span><span class="token punctuation">]</span> childs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">boolean</span> isLeft<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token class-name">Node</span> root<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">public</span> <span class="token class-name">Trie</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    </pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">String</span> word<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token function">insert</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token comment">// 递归插入</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">String</span> word<span class="token punctuation">,</span> <span class="token class-name">Node</span> root<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>word<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>            <span class="token comment">// 如果字符串的长度为 0, 说明已经插入完了，然后设置叶子节点</span></pre></td></tr><tr><td data-num="24"></td><td><pre>            root<span class="token punctuation">.</span>isLeft<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>            <span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        <span class="token keyword">char</span> first <span class="token operator">=</span> word<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>        <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token function">toDigital</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        <span class="token comment">// 如果子节点为 null, 就创建一个新的</span></pre></td></tr><tr><td data-num="30"></td><td><pre>       <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>childs<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> root<span class="token punctuation">.</span>childs<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>        <span class="token comment">// 将字符串切割，然后递归调用，将剩下的字符串插入</span></pre></td></tr><tr><td data-num="32"></td><td><pre>        <span class="token function">insert</span><span class="token punctuation">(</span>word<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>root<span class="token punctuation">.</span>childs<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token class-name">String</span> word<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>       <span class="token keyword">return</span> <span class="token function">search</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>    <span class="token comment">// 查找单词</span></pre></td></tr><tr><td data-num="38"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token class-name">String</span> word<span class="token punctuation">,</span><span class="token class-name">Node</span> root<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="39"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>        <span class="token comment">// 如果 word 的长度为 0,</span></pre></td></tr><tr><td data-num="42"></td><td><pre>         <span class="token keyword">if</span><span class="token punctuation">(</span>word<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">.</span>isLeft<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>        <span class="token keyword">char</span> first<span class="token operator">=</span>word<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>        <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token function">toDigital</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>        <span class="token comment">// 递归查找</span></pre></td></tr><tr><td data-num="46"></td><td><pre>        <span class="token keyword">return</span> <span class="token function">search</span><span class="token punctuation">(</span>word<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>root<span class="token punctuation">.</span>childs<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>    </pre></td></tr><tr><td data-num="49"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token class-name">String</span> prefix<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>      <span class="token keyword">return</span> <span class="token function">startsWith</span><span class="token punctuation">(</span>prefix<span class="token punctuation">,</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token class-name">String</span> prefix<span class="token punctuation">,</span><span class="token class-name">Node</span> root<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="53"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>        <span class="token comment">// 如果为空，说明不匹配，直接返回</span></pre></td></tr><tr><td data-num="55"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>        <span class="token comment">// 如果长度为 0, 说明字符串已经全部匹配上了，直接返回 false</span></pre></td></tr><tr><td data-num="57"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>prefix<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="58"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="61"></td><td><pre>        <span class="token keyword">char</span> first<span class="token operator">=</span>prefix<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="62"></td><td><pre>        <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token function">toDigital</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="63"></td><td><pre>        <span class="token keyword">return</span> <span class="token function">startsWith</span><span class="token punctuation">(</span>prefix<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>root<span class="token punctuation">.</span>childs<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="64"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="65"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">toDigital</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="66"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="67"></td><td><pre>        <span class="token keyword">return</span> c<span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="68"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="69"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="70"></td><td><pre></pre></td></tr><tr><td data-num="71"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="72"></td><td><pre> * Your Trie object will be instantiated and called as such:</pre></td></tr><tr><td data-num="73"></td><td><pre> * Trie obj = new Trie();</pre></td></tr><tr><td data-num="74"></td><td><pre> * obj.insert(word);</pre></td></tr><tr><td data-num="75"></td><td><pre> * boolean param_2 = obj.search(word);</pre></td></tr><tr><td data-num="76"></td><td><pre> * boolean param_3 = obj.startsWith(prefix);</pre></td></tr><tr><td data-num="77"></td><td><pre> */</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目链接&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#题目链接&quot;&gt;#&lt;/a&gt; 题目链接&lt;/h1&gt;
&lt;p&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMva</summary>
      
    
    
    
    <category term="算法" scheme="https://guyouwyh.github.io/guyouwyh/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="递推与递归" scheme="https://guyouwyh.github.io/guyouwyh/categories/%E7%AE%97%E6%B3%95/%E9%80%92%E6%8E%A8%E4%B8%8E%E9%80%92%E5%BD%92/"/>
    
    
    <category term="前缀树、字典树" scheme="https://guyouwyh.github.io/guyouwyh/tags/%E5%89%8D%E7%BC%80%E6%A0%91%E3%80%81%E5%AD%97%E5%85%B8%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>【力扣】构建二叉搜索树</title>
    <link href="https://guyouwyh.github.io/guyouwyh/2022/04/14/%E7%AE%97%E6%B3%95/%E9%80%92%E6%8E%A8%E4%B8%8E%E9%80%92%E5%BD%92/%E6%9E%84%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
    <id>https://guyouwyh.github.io/guyouwyh/2022/04/14/%E7%AE%97%E6%B3%95/%E9%80%92%E6%8E%A8%E4%B8%8E%E9%80%92%E5%BD%92/%E6%9E%84%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</id>
    <published>2022-04-14T00:12:17.260Z</published>
    <updated>2022-04-14T00:27:02.827Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a class="anchor" href="#题目链接">#</a> 题目链接</h1><p>构建二叉搜索树一般有两类题:</p><ol><li>有序链表转换二叉搜索树:<span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvY29udmVydC1zb3J0ZWQtbGlzdC10by1iaW5hcnktc2VhcmNoLXRyZWUv">https://leetcode-cn.com/problems/convert-sorted-list-to-binary-search-tree/</span></li><li>有序数组转换为二叉搜索树:<span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvY29udmVydC1zb3J0ZWQtYXJyYXktdG8tYmluYXJ5LXNlYXJjaC10cmVlLw==">https://leetcode-cn.com/problems/convert-sorted-array-to-binary-search-tree/</span></li></ol><h1 id="思路分析"><a class="anchor" href="#思路分析">#</a> 思路分析</h1><h2 id="有序数组转二叉搜索树"><a class="anchor" href="#有序数组转二叉搜索树">#</a> 有序数组转二叉搜索树</h2><p>对于有序数组转换为二叉搜索树，根绝二叉搜索树的特性: <code>左&lt;根&lt;右</code> ，可以使用分治的思想，首先根节点一定是数组的中间点，左部分肯定会构成左子树，右部分肯定会构成右子树。然后递归的找数组左部分的中点作为左子树的根节点，递归的找右部分的中点作为右子树的根节点。最后得到的就是一颗二叉搜索树。</p><h2 id="有序链表转二叉搜索树"><a class="anchor" href="#有序链表转二叉搜索树">#</a> 有序链表转二叉搜索树</h2><p>对于有序链表转换为二叉搜索树，可以使用跟有序数组一样的思路，但是由于链表不具备随机访问的特性，不能像数组一样直接找中点，我们可以使用快慢指针，使用一个快指针和一个慢指针，快指针每次走一次，慢指针每次走两次，当满指真达到链表尾部的时候，快指针恰好到达中点。然后我们截断中点左右的链表，递归左部分和右部分。</p><h1 id="ac代码"><a class="anchor" href="#ac代码">#</a> AC 代码</h1><h2 id="有序数组转二叉搜索树-2"><a class="anchor" href="#有序数组转二叉搜索树-2">#</a> 有序数组转二叉搜索树</h2><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="2"></td><td><pre> * Definition for a binary tree node.</pre></td></tr><tr><td data-num="3"></td><td><pre> * public class TreeNode &#123;</pre></td></tr><tr><td data-num="4"></td><td><pre> *     int val;</pre></td></tr><tr><td data-num="5"></td><td><pre> *     TreeNode left;</pre></td></tr><tr><td data-num="6"></td><td><pre> *     TreeNode right;</pre></td></tr><tr><td data-num="7"></td><td><pre> *     TreeNode() &#123;&#125;</pre></td></tr><tr><td data-num="8"></td><td><pre> *     TreeNode(int val) &#123; this.val = val; &#125;</pre></td></tr><tr><td data-num="9"></td><td><pre> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</pre></td></tr><tr><td data-num="10"></td><td><pre> *         this.val = val;</pre></td></tr><tr><td data-num="11"></td><td><pre> *         this.left = left;</pre></td></tr><tr><td data-num="12"></td><td><pre> *         this.right = right;</pre></td></tr><tr><td data-num="13"></td><td><pre> *     &#125;</pre></td></tr><tr><td data-num="14"></td><td><pre> * &#125;</pre></td></tr><tr><td data-num="15"></td><td><pre> */</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">int</span> cur<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">dg</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">></span>r<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token class-name">TreeNode</span> node<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        node<span class="token punctuation">.</span>left<span class="token operator">=</span><span class="token function">dg</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>l<span class="token punctuation">,</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        node<span class="token punctuation">.</span>right<span class="token operator">=</span><span class="token function">dg</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token keyword">return</span> node<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        </pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">sortedArrayToBST</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        <span class="token keyword">return</span> <span class="token function">dg</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="有序链表转二叉搜索树-2"><a class="anchor" href="#有序链表转二叉搜索树-2">#</a> 有序链表转二叉搜索树</h2><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="2"></td><td><pre> * Definition for singly-linked list.</pre></td></tr><tr><td data-num="3"></td><td><pre> * public class ListNode &#123;</pre></td></tr><tr><td data-num="4"></td><td><pre> *     int val;</pre></td></tr><tr><td data-num="5"></td><td><pre> *     ListNode next;</pre></td></tr><tr><td data-num="6"></td><td><pre> *     ListNode() &#123;&#125;</pre></td></tr><tr><td data-num="7"></td><td><pre> *     ListNode(int val) &#123; this.val = val; &#125;</pre></td></tr><tr><td data-num="8"></td><td><pre> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</pre></td></tr><tr><td data-num="9"></td><td><pre> * &#125;</pre></td></tr><tr><td data-num="10"></td><td><pre> */</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="12"></td><td><pre> * Definition for a binary tree node.</pre></td></tr><tr><td data-num="13"></td><td><pre> * public class TreeNode &#123;</pre></td></tr><tr><td data-num="14"></td><td><pre> *     int val;</pre></td></tr><tr><td data-num="15"></td><td><pre> *     TreeNode left;</pre></td></tr><tr><td data-num="16"></td><td><pre> *     TreeNode right;</pre></td></tr><tr><td data-num="17"></td><td><pre> *     TreeNode() &#123;&#125;</pre></td></tr><tr><td data-num="18"></td><td><pre> *     TreeNode(int val) &#123; this.val = val; &#125;</pre></td></tr><tr><td data-num="19"></td><td><pre> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</pre></td></tr><tr><td data-num="20"></td><td><pre> *         this.val = val;</pre></td></tr><tr><td data-num="21"></td><td><pre> *         this.left = left;</pre></td></tr><tr><td data-num="22"></td><td><pre> *         this.right = right;</pre></td></tr><tr><td data-num="23"></td><td><pre> *     &#125;</pre></td></tr><tr><td data-num="24"></td><td><pre> * &#125;</pre></td></tr><tr><td data-num="25"></td><td><pre> */</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">getPreMid</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        <span class="token comment">// 快慢指针，pre 记录慢指针的前一个节点，是为了断开左部分链表</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        <span class="token class-name">ListNode</span> slow<span class="token operator">=</span>head<span class="token punctuation">,</span>fast<span class="token operator">=</span>head<span class="token punctuation">.</span>next<span class="token punctuation">,</span>pre<span class="token operator">=</span>head<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>        <span class="token keyword">while</span><span class="token punctuation">(</span>fast<span class="token operator">!=</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span>fast<span class="token punctuation">.</span>next<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>            pre<span class="token operator">=</span>slow<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>            slow<span class="token operator">=</span>slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>            fast<span class="token operator">=</span>fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>        <span class="token keyword">return</span> pre<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>    <span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">sortedListToBST</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>        </pre></td></tr><tr><td data-num="41"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>        <span class="token comment">// 单个节点，直接构建出树节点</span></pre></td></tr><tr><td data-num="43"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>        <span class="token class-name">ListNode</span> mid <span class="token operator">=</span> <span class="token function">getPreMid</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>        <span class="token class-name">ListNode</span> next<span class="token operator">=</span>mid<span class="token punctuation">.</span>next<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>        mid<span class="token punctuation">.</span>next<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>        <span class="token class-name">TreeNode</span> node<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>next<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>        <span class="token comment">// 递归左部分</span></pre></td></tr><tr><td data-num="49"></td><td><pre>        node<span class="token punctuation">.</span>left<span class="token operator">=</span><span class="token function">sortedListToBST</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>        <span class="token comment">// 递归右部分</span></pre></td></tr><tr><td data-num="51"></td><td><pre>        node<span class="token punctuation">.</span>right<span class="token operator">=</span><span class="token function">sortedListToBST</span><span class="token punctuation">(</span>next<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>        <span class="token keyword">return</span> node<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目链接&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#题目链接&quot;&gt;#&lt;/a&gt; 题目链接&lt;/h1&gt;
&lt;p&gt;构建二叉搜索树一般有两类题:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;有序链表转换二叉搜索树:&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0c</summary>
      
    
    
    
    <category term="算法" scheme="https://guyouwyh.github.io/guyouwyh/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="递推与递归" scheme="https://guyouwyh.github.io/guyouwyh/categories/%E7%AE%97%E6%B3%95/%E9%80%92%E6%8E%A8%E4%B8%8E%E9%80%92%E5%BD%92/"/>
    
    
    <category term="BST" scheme="https://guyouwyh.github.io/guyouwyh/tags/BST/"/>
    
  </entry>
  
  <entry>
    <title>【力扣】572. 另一棵树的子树</title>
    <link href="https://guyouwyh.github.io/guyouwyh/2022/04/09/%E7%AE%97%E6%B3%95/%E9%80%92%E6%8E%A8%E4%B8%8E%E9%80%92%E5%BD%92/%E5%8F%A6%E4%B8%80%E6%A3%B5%E6%A0%91%E7%9A%84%E5%AD%90%E6%A0%91/"/>
    <id>https://guyouwyh.github.io/guyouwyh/2022/04/09/%E7%AE%97%E6%B3%95/%E9%80%92%E6%8E%A8%E4%B8%8E%E9%80%92%E5%BD%92/%E5%8F%A6%E4%B8%80%E6%A3%B5%E6%A0%91%E7%9A%84%E5%AD%90%E6%A0%91/</id>
    <published>2022-04-09T11:04:22.800Z</published>
    <updated>2022-04-09T11:07:43.773Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a class="anchor" href="#题目链接">#</a> 题目链接</h1><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc3VidHJlZS1vZi1hbm90aGVyLXRyZWUv">https://leetcode-cn.com/problems/subtree-of-another-tree/</span></p><h1 id="思路分析"><a class="anchor" href="#思路分析">#</a> 思路分析</h1><p>这题其实跟路径求和 III 一样的情况，可以使用暴力搜索，因为子树的根节点不一与父树的根节点值一样，因此，需要搜索左子树或者右子树，将每个节点都遍历一次，如果最后子树节点和父树节点都为 null, 那就说明匹配上了，返回 true。<ins>这种需要求连续路径，并且不从根节点开始的，都可以使用暴力搜索</ins>。</p><h1 id="ac代码"><a class="anchor" href="#ac代码">#</a> AC 代码</h1><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="2"></td><td><pre> * Definition for a binary tree node.</pre></td></tr><tr><td data-num="3"></td><td><pre> * public class TreeNode &#123;</pre></td></tr><tr><td data-num="4"></td><td><pre> *     int val;</pre></td></tr><tr><td data-num="5"></td><td><pre> *     TreeNode left;</pre></td></tr><tr><td data-num="6"></td><td><pre> *     TreeNode right;</pre></td></tr><tr><td data-num="7"></td><td><pre> *     TreeNode() &#123;&#125;</pre></td></tr><tr><td data-num="8"></td><td><pre> *     TreeNode(int val) &#123; this.val = val; &#125;</pre></td></tr><tr><td data-num="9"></td><td><pre> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</pre></td></tr><tr><td data-num="10"></td><td><pre> *         this.val = val;</pre></td></tr><tr><td data-num="11"></td><td><pre> *         this.left = left;</pre></td></tr><tr><td data-num="12"></td><td><pre> *         this.right = right;</pre></td></tr><tr><td data-num="13"></td><td><pre> *     &#125;</pre></td></tr><tr><td data-num="14"></td><td><pre> * &#125;</pre></td></tr><tr><td data-num="15"></td><td><pre> */</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSubtree</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token class-name">TreeNode</span> subRoot<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token comment">// 这里递归搜索每个节点</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token keyword">return</span> <span class="token function">isSubtreeWithRoot</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>subRoot<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isSubtree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>subRoot<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isSubtree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>subRoot<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSubtreeWithRoot</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span><span class="token class-name">TreeNode</span> subRoot<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token comment">// 如果最后两个节点为 null, 说明匹配成功，返回 true</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> subRoot<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token comment">// 如果其中一个为 null 直接返回 false;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token keyword">null</span><span class="token operator">||</span>subRoot<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token operator">!=</span>subRoot<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token function">isSubtreeWithRoot</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>subRoot<span class="token punctuation">.</span>left<span class="token punctuation">)</span>                                                   <span class="token operator">&amp;&amp;</span><span class="token function">isSubtreeWithRoot</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>subRoot<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目链接&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#题目链接&quot;&gt;#&lt;/a&gt; 题目链接&lt;/h1&gt;
&lt;p&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc</summary>
      
    
    
    
    <category term="算法" scheme="https://guyouwyh.github.io/guyouwyh/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="递推与递归" scheme="https://guyouwyh.github.io/guyouwyh/categories/%E7%AE%97%E6%B3%95/%E9%80%92%E6%8E%A8%E4%B8%8E%E9%80%92%E5%BD%92/"/>
    
    
    <category term="二叉树" scheme="https://guyouwyh.github.io/guyouwyh/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>【力扣】437. 路径总和 III</title>
    <link href="https://guyouwyh.github.io/guyouwyh/2022/04/09/%E7%AE%97%E6%B3%95/%E9%80%92%E6%8E%A8%E4%B8%8E%E9%80%92%E5%BD%92/%E8%B7%AF%E5%BE%84%E6%80%BB%E5%92%8CIII/"/>
    <id>https://guyouwyh.github.io/guyouwyh/2022/04/09/%E7%AE%97%E6%B3%95/%E9%80%92%E6%8E%A8%E4%B8%8E%E9%80%92%E5%BD%92/%E8%B7%AF%E5%BE%84%E6%80%BB%E5%92%8CIII/</id>
    <published>2022-04-09T08:45:48.319Z</published>
    <updated>2022-04-09T11:03:43.174Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a class="anchor" href="#题目链接">#</a> 题目链接</h1><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcGF0aC1zdW0taWlpLw==">https://leetcode-cn.com/problems/path-sum-iii/</span></p><h1 id="思路分析"><a class="anchor" href="#思路分析">#</a> 思路分析</h1><p>由于路径是连续的，并且起点不一定是根节点，因此可以从所有节点遍历，相当于暴力搜索。由于每个点都要遍历一次，这样时间复杂度是 O (n^2)。<br />对于求和问题，应该要联想到前缀和，这题可以使用前缀和来优化。降低时间复杂度。由于只要找路径和等于 target 的，每次遍历的时候可以记录下当前节点的前缀和 curSum, 使用哈希表存储每个前缀和出现的次数，每次找路径，就可以去 map 中查找 curSum-target 的值。这就是在当前节点之前出现的路径方案数量。由于只能向下进行求和，因此要使用回溯，避免当前节点导致 map 中的前缀和数量影响到其他节点。</p><h1 id="ac代码"><a class="anchor" href="#ac代码">#</a> AC 代码</h1><h2 id="暴力深搜"><a class="anchor" href="#暴力深搜">#</a> 暴力深搜</h2><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="2"></td><td><pre> * Definition for a binary tree node.</pre></td></tr><tr><td data-num="3"></td><td><pre> * public class TreeNode &#123;</pre></td></tr><tr><td data-num="4"></td><td><pre> *     int val;</pre></td></tr><tr><td data-num="5"></td><td><pre> *     TreeNode left;</pre></td></tr><tr><td data-num="6"></td><td><pre> *     TreeNode right;</pre></td></tr><tr><td data-num="7"></td><td><pre> *     TreeNode() &#123;&#125;</pre></td></tr><tr><td data-num="8"></td><td><pre> *     TreeNode(int val) &#123; this.val = val; &#125;</pre></td></tr><tr><td data-num="9"></td><td><pre> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</pre></td></tr><tr><td data-num="10"></td><td><pre> *         this.val = val;</pre></td></tr><tr><td data-num="11"></td><td><pre> *         this.left = left;</pre></td></tr><tr><td data-num="12"></td><td><pre> *         this.right = right;</pre></td></tr><tr><td data-num="13"></td><td><pre> *     &#125;</pre></td></tr><tr><td data-num="14"></td><td><pre> * &#125;</pre></td></tr><tr><td data-num="15"></td><td><pre> */</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">pathSum</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> targetSum<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>targetSum<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">pathSum</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>targetSum<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">pathSum</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>targetSum<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span><span class="token keyword">int</span> targetSum<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token operator">==</span>targetSum<span class="token punctuation">)</span> res<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        res<span class="token operator">+=</span><span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>targetSum<span class="token operator">-</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>targetSum<span class="token operator">-</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        <span class="token keyword">return</span> res<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="前缀和优化"><a class="anchor" href="#前缀和优化">#</a> 前缀和优化</h2><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="2"></td><td><pre> * Definition for a binary tree node.</pre></td></tr><tr><td data-num="3"></td><td><pre> * public class TreeNode &#123;</pre></td></tr><tr><td data-num="4"></td><td><pre> *     int val;</pre></td></tr><tr><td data-num="5"></td><td><pre> *     TreeNode left;</pre></td></tr><tr><td data-num="6"></td><td><pre> *     TreeNode right;</pre></td></tr><tr><td data-num="7"></td><td><pre> *     TreeNode() &#123;&#125;</pre></td></tr><tr><td data-num="8"></td><td><pre> *     TreeNode(int val) &#123; this.val = val; &#125;</pre></td></tr><tr><td data-num="9"></td><td><pre> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</pre></td></tr><tr><td data-num="10"></td><td><pre> *         this.val = val;</pre></td></tr><tr><td data-num="11"></td><td><pre> *         this.left = left;</pre></td></tr><tr><td data-num="12"></td><td><pre> *         this.right = right;</pre></td></tr><tr><td data-num="13"></td><td><pre> *     &#125;</pre></td></tr><tr><td data-num="14"></td><td><pre> * &#125;</pre></td></tr><tr><td data-num="15"></td><td><pre> */</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token class-name">HashMap</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">pathSum</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> targetSum<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 这里是为了保证不遗漏当根节点的值等于 targetSum 时候的一种路径和。</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token function">dg</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>targetSum<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dg</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span><span class="token keyword">int</span> targetSum<span class="token punctuation">,</span><span class="token keyword">int</span> sum<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        sum<span class="token operator">+=</span>root<span class="token punctuation">.</span>val<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>        <span class="token comment">// 这里获取之前前缀和等于 sum-targetSum 的节点数量</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        <span class="token comment">// 这里需要加起来</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        ans<span class="token operator">+=</span>map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>sum<span class="token operator">-</span>targetSum<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>        <span class="token comment">// 然后更新当前前缀和节点的数量</span></pre></td></tr><tr><td data-num="32"></td><td><pre>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span>map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>        <span class="token function">dg</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>targetSum<span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>        <span class="token function">dg</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>targetSum<span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>        <span class="token comment">// 由于只能往左或往右走一条路，因此需要回溯一下状态，避免影响其他路</span></pre></td></tr><tr><td data-num="36"></td><td><pre>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>    </pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目链接&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#题目链接&quot;&gt;#&lt;/a&gt; 题目链接&lt;/h1&gt;
&lt;p&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc</summary>
      
    
    
    
    <category term="算法" scheme="https://guyouwyh.github.io/guyouwyh/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="递推与递归" scheme="https://guyouwyh.github.io/guyouwyh/categories/%E7%AE%97%E6%B3%95/%E9%80%92%E6%8E%A8%E4%B8%8E%E9%80%92%E5%BD%92/"/>
    
    
    <category term="二叉树、前缀和" scheme="https://guyouwyh.github.io/guyouwyh/tags/%E4%BA%8C%E5%8F%89%E6%A0%91%E3%80%81%E5%89%8D%E7%BC%80%E5%92%8C/"/>
    
  </entry>
  
  <entry>
    <title>【力扣】617. 合并二叉树</title>
    <link href="https://guyouwyh.github.io/guyouwyh/2022/04/09/%E7%AE%97%E6%B3%95/%E9%80%92%E6%8E%A8%E4%B8%8E%E9%80%92%E5%BD%92/617.%20%E5%90%88%E5%B9%B6%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>https://guyouwyh.github.io/guyouwyh/2022/04/09/%E7%AE%97%E6%B3%95/%E9%80%92%E6%8E%A8%E4%B8%8E%E9%80%92%E5%BD%92/617.%20%E5%90%88%E5%B9%B6%E4%BA%8C%E5%8F%89%E6%A0%91/</id>
    <published>2022-04-09T07:14:56.487Z</published>
    <updated>2022-04-09T07:19:26.999Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a class="anchor" href="#题目链接">#</a> 题目链接</h1><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbWVyZ2UtdHdvLWJpbmFyeS10cmVlcy8=">https://leetcode-cn.com/problems/merge-two-binary-trees/</span></p><h1 id="思路分析"><a class="anchor" href="#思路分析">#</a> 思路分析</h1><p>我的思路是不创建新的节点，第一个树的基础上修改，当两个节点都不为 null, 将第一个节点的值加上第二个节点的值，如果两个节点都为 null, 返回 null, 如否则，那肯定是其中一个为 null, 对于第二棵树为 null, 可以不管，当第一棵树为 null 的时候，需要 new 一个新的节点，值为第二棵树节点的值。然后递归的去合并左子树、右子树。</p><h1 id="ac代码"><a class="anchor" href="#ac代码">#</a> AC 代码</h1><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="2"></td><td><pre> * Definition for a binary tree node.</pre></td></tr><tr><td data-num="3"></td><td><pre> * public class TreeNode &#123;</pre></td></tr><tr><td data-num="4"></td><td><pre> *     int val;</pre></td></tr><tr><td data-num="5"></td><td><pre> *     TreeNode left;</pre></td></tr><tr><td data-num="6"></td><td><pre> *     TreeNode right;</pre></td></tr><tr><td data-num="7"></td><td><pre> *     TreeNode() &#123;&#125;</pre></td></tr><tr><td data-num="8"></td><td><pre> *     TreeNode(int val) &#123; this.val = val; &#125;</pre></td></tr><tr><td data-num="9"></td><td><pre> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</pre></td></tr><tr><td data-num="10"></td><td><pre> *         this.val = val;</pre></td></tr><tr><td data-num="11"></td><td><pre> *         this.left = left;</pre></td></tr><tr><td data-num="12"></td><td><pre> *         this.right = right;</pre></td></tr><tr><td data-num="13"></td><td><pre> *     &#125;</pre></td></tr><tr><td data-num="14"></td><td><pre> * &#125;</pre></td></tr><tr><td data-num="15"></td><td><pre> */</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">mergeTrees</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root1<span class="token punctuation">,</span> <span class="token class-name">TreeNode</span> root2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>root1<span class="token operator">!=</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> root2<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>            root1<span class="token punctuation">.</span>val<span class="token operator">+=</span>root2<span class="token punctuation">.</span>val<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>root1<span class="token operator">==</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> root2<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>            <span class="token keyword">if</span><span class="token punctuation">(</span>root1<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre>             root1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>root2<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>  </pre></td></tr><tr><td data-num="29"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>       root1<span class="token punctuation">.</span>left <span class="token operator">=</span><span class="token function">mergeTrees</span><span class="token punctuation">(</span>root1<span class="token operator">==</span><span class="token keyword">null</span><span class="token operator">?</span><span class="token keyword">null</span><span class="token operator">:</span>root1<span class="token punctuation">.</span>left<span class="token punctuation">,</span>root2<span class="token operator">==</span><span class="token keyword">null</span><span class="token operator">?</span><span class="token keyword">null</span><span class="token operator">:</span>root2<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>       root1<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">mergeTrees</span><span class="token punctuation">(</span>root1<span class="token operator">==</span><span class="token keyword">null</span><span class="token operator">?</span><span class="token keyword">null</span><span class="token operator">:</span>root1<span class="token punctuation">.</span>right<span class="token punctuation">,</span>root2<span class="token operator">==</span><span class="token keyword">null</span><span class="token operator">?</span><span class="token keyword">null</span><span class="token operator">:</span>root2<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>        <span class="token keyword">return</span> root1<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目链接&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#题目链接&quot;&gt;#&lt;/a&gt; 题目链接&lt;/h1&gt;
&lt;p&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvb</summary>
      
    
    
    
    <category term="算法" scheme="https://guyouwyh.github.io/guyouwyh/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="递推与递归" scheme="https://guyouwyh.github.io/guyouwyh/categories/%E7%AE%97%E6%B3%95/%E9%80%92%E6%8E%A8%E4%B8%8E%E9%80%92%E5%BD%92/"/>
    
    
    <category term="二叉树" scheme="https://guyouwyh.github.io/guyouwyh/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
    <category term="递归" scheme="https://guyouwyh.github.io/guyouwyh/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>【力扣】543. 二叉树的直径</title>
    <link href="https://guyouwyh.github.io/guyouwyh/2022/04/09/%E7%AE%97%E6%B3%95/%E9%80%92%E6%8E%A8%E4%B8%8E%E9%80%92%E5%BD%92/543.%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84/"/>
    <id>https://guyouwyh.github.io/guyouwyh/2022/04/09/%E7%AE%97%E6%B3%95/%E9%80%92%E6%8E%A8%E4%B8%8E%E9%80%92%E5%BD%92/543.%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84/</id>
    <published>2022-04-09T06:30:16.356Z</published>
    <updated>2022-04-09T06:49:12.969Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a class="anchor" href="#题目链接">#</a> 题目链接</h1><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZGlhbWV0ZXItb2YtYmluYXJ5LXRyZWUv">https://leetcode-cn.com/problems/diameter-of-binary-tree/</span></p><h1 id="思路分析"><a class="anchor" href="#思路分析">#</a> 思路分析</h1><p>要求二叉树的直径，我的思路是对于一个节点来说，经过它的直径有三种情况:<br /><img data-src="https://tva1.sinaimg.cn/large/e6c9d24egy1h13guz1n9oj20me142ac4.jpg" alt="" /><br /> 拿图中的 2 节点来说<br />第一种情况，就是左右两个儿子到它的路径相加<br />第二种情况，就是左儿子与它的路径，加上它到父节点的路径<br />第三种情况，就是右儿子与它的路径，加上它到父节点的路径</p><p>由于经过父节点的路径只由第二种情况和第三种情况决定，因此需要用一个变量保存第一种情况的值。</p><h1 id="ac代码"><a class="anchor" href="#ac代码">#</a> AC 代码</h1><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="2"></td><td><pre> * Definition for a binary tree node.</pre></td></tr><tr><td data-num="3"></td><td><pre> * public class TreeNode &#123;</pre></td></tr><tr><td data-num="4"></td><td><pre> *     int val;</pre></td></tr><tr><td data-num="5"></td><td><pre> *     TreeNode left;</pre></td></tr><tr><td data-num="6"></td><td><pre> *     TreeNode right;</pre></td></tr><tr><td data-num="7"></td><td><pre> *     TreeNode() &#123;&#125;</pre></td></tr><tr><td data-num="8"></td><td><pre> *     TreeNode(int val) &#123; this.val = val; &#125;</pre></td></tr><tr><td data-num="9"></td><td><pre> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</pre></td></tr><tr><td data-num="10"></td><td><pre> *         this.val = val;</pre></td></tr><tr><td data-num="11"></td><td><pre> *         this.left = left;</pre></td></tr><tr><td data-num="12"></td><td><pre> *         this.right = right;</pre></td></tr><tr><td data-num="13"></td><td><pre> *     &#125;</pre></td></tr><tr><td data-num="14"></td><td><pre> * &#125;</pre></td></tr><tr><td data-num="15"></td><td><pre> */</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">int</span> max<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">dg</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>         <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token keyword">int</span> left<span class="token operator">=</span><span class="token function">dg</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token keyword">int</span> right<span class="token operator">=</span><span class="token function">dg</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token comment">// 更新 max 的值</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        max<span class="token operator">=</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span>left<span class="token operator">+</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token comment">// 由左儿子和右儿子到节点的路径最大值决定。</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">diameterOfBinaryTree</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        <span class="token function">dg</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        <span class="token keyword">return</span> max<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目链接&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#题目链接&quot;&gt;#&lt;/a&gt; 题目链接&lt;/h1&gt;
&lt;p&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZ</summary>
      
    
    
    
    <category term="算法" scheme="https://guyouwyh.github.io/guyouwyh/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="递推与递归" scheme="https://guyouwyh.github.io/guyouwyh/categories/%E7%AE%97%E6%B3%95/%E9%80%92%E6%8E%A8%E4%B8%8E%E9%80%92%E5%BD%92/"/>
    
    
    <category term="二叉树" scheme="https://guyouwyh.github.io/guyouwyh/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
    <category term="递归" scheme="https://guyouwyh.github.io/guyouwyh/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
</feed>
