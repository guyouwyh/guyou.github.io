<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>努力走,走到灯火通明</title>
  
  
  <link href="https://guyouwyh.github.io/guyouwyh/atom.xml" rel="self"/>
  
  <link href="https://guyouwyh.github.io/guyouwyh/"/>
  <updated>2022-11-01T13:08:13.805Z</updated>
  <id>https://guyouwyh.github.io/guyouwyh/</id>
  
  <author>
    <name>故犹</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LongAdder源码分析</title>
    <link href="https://guyouwyh.github.io/guyouwyh/2022/11/01/%E5%90%8E%E7%AB%AF/Java/Java%E5%B9%B6%E5%8F%91/LongAddr/"/>
    <id>https://guyouwyh.github.io/guyouwyh/2022/11/01/%E5%90%8E%E7%AB%AF/Java/Java%E5%B9%B6%E5%8F%91/LongAddr/</id>
    <published>2022-11-01T11:58:40.398Z</published>
    <updated>2022-11-01T13:08:13.805Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a class="anchor" href="#介绍">#</a> 介绍</h1><p>LongAdder 的 JDK8 种提供的一个针对 Long 类型的原子操作。</p><h1 id="核心原理"><a class="anchor" href="#核心原理">#</a> 核心原理</h1><p>先说一下为什么要出现这么类？明明有 AtomicLong, 但是实际上，AtomicLong 在高并发下性能是不够的，还可以再优化。LongAdder 也就应运而生了。<br />其核心思想是:<br /><ins> 将一个变量拆成多个变量。把一个 Long 类型拆成一个 base 变量外加多个 Cell。当多个线程并发累加的时候，如果并发度低，就直接加到 base 变量上，如果并发度高，就平摊在 Cell 上。最后取值的时候再将 base 和 Cell 求 sum 运算。</ins></p><p><img data-src="https://raw.githubusercontent.com/guyouwyh/picture/main/20221101201303.png" alt="" /></p><h1 id="cell和base"><a class="anchor" href="#cell和base">#</a> Cell 和 Base</h1><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>        <span class="token class-name">Cell</span><span class="token punctuation">[</span><span class="token punctuation">]</span> as <span class="token operator">=</span> cells<span class="token punctuation">;</span> <span class="token class-name">Cell</span> a<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token keyword">long</span> sum <span class="token operator">=</span> base<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>as <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> as<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">=</span> as<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>                    sum <span class="token operator">+=</span> a<span class="token punctuation">.</span>value<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>这是 LongAdder 中的求和函数，可以看到直接拿到 Cell 数组的值，然后一个个累加起来，最后返回。<br />Cell 其实是 LongAdder 父类 Strip64 中的一个内部类，源码如下:</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token annotation punctuation">@sun.misc.Contended</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Cell</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>        <span class="token keyword">volatile</span> <span class="token keyword">long</span> value<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token class-name">Cell</span><span class="token punctuation">(</span><span class="token keyword">long</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> value <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">cas</span><span class="token punctuation">(</span><span class="token keyword">long</span> cmp<span class="token punctuation">,</span> <span class="token keyword">long</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>            <span class="token keyword">return</span> UNSAFE<span class="token punctuation">.</span><span class="token function">compareAndSwapLong</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> valueOffset<span class="token punctuation">,</span> cmp<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token comment">// Unsafe mechanics</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span></span>Unsafe</span> UNSAFE<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> valueOffset<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token keyword">static</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>                UNSAFE <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span></span>Unsafe</span><span class="token punctuation">.</span><span class="token function">getUnsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>                <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> ak <span class="token operator">=</span> <span class="token class-name">Cell</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>                valueOffset <span class="token operator">=</span> UNSAFE<span class="token punctuation">.</span>objectFieldOffset</pre></td></tr><tr><td data-num="16"></td><td><pre>                    <span class="token punctuation">(</span>ak<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>这段代码应该很熟悉了，还是使用了 Unsafe 种的 CAS 操作。<br />可以注意到在 Sum 求和函数中，并没有给 cell [] 数组加锁，试想一个场景，如果一边有线程对其执行求和操作，一边还有线程修改数组里的值，那么会怎么样？这里牵扯到一个思想，叫做<span class="red">最终一致性</span>，也就是说不要求强一致性，只要最后的 sum 成功即可。</p><h1 id="伪共享与缓存行填充"><a class="anchor" href="#伪共享与缓存行填充">#</a> 伪共享与缓存行填充</h1><p>可以注意到 Cell 内部类前有一个注解修饰 <code>@sun.misc.Contended</code> 。有没有好奇这个注解有什么用？其实这个注解解决了伪共享问题。<br />在 cpu 架构中，cpu 是通过缓存与主存进行数据交换的，而交换的最小单位被称为缓存行 (Cache line), 在 64 位 x86 架构中，缓存行的大小是 64byte, 也就是 8 个 long 类型大小。<br />假设一个两核的 cpu, 主存中有 X、Y 变量，而 X、Y 变量同样也在两个 cpu 中的缓存行中，并且 X 和 Y 都处于同一个缓存行中。假如 cpu1 修改了 X 变量，那么就会通过总线通知 cpu2 对应的缓存行失效，但是实际上，Y 并没有改变，但是 Y 也失效了。<br />本来只应该让 X 失效，却让 Y 也失效了，也就是 cpu 缓存伪共享问题。<br />解决方案其实很简单，让 X 和 Y 不在同一个缓存行就可以了，X 所在的缓存行失效并不会影响 Y 所在的缓存行失效。<br />这时候就需要缓存行填充，即在 X、Y 后加上 7 个 long 类型，让 X 和 Y 处于不同的缓存行中。<br /><span class="red"> <code>@sun.misc.Contended</code>  正是这个作用，用于缓存行填充，从而保证 Cell 数组中相邻的元素不会落到同一个缓存行中</span>。</p><h1 id="longadder源码解析"><a class="anchor" href="#longadder源码解析">#</a> LongAdder 源码解析</h1><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 自增调用 add</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token comment">// 自减也调用 add</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token function">add</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">long</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token class-name">Cell</span><span class="token punctuation">[</span><span class="token punctuation">]</span> as<span class="token punctuation">;</span> <span class="token keyword">long</span> b<span class="token punctuation">,</span> v<span class="token punctuation">;</span> <span class="token keyword">int</span> m<span class="token punctuation">;</span> <span class="token class-name">Cell</span> a<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token comment">// 如果 cells 不为空 或者将 x 添加到 base 上失败</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>as <span class="token operator">=</span> cells<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">casBase</span><span class="token punctuation">(</span>b <span class="token operator">=</span> base<span class="token punctuation">,</span> b <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>            <span class="token keyword">boolean</span> uncontended <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>            <span class="token comment">//</span></pre></td></tr><tr><td data-num="16"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>as <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token punctuation">(</span>m <span class="token operator">=</span> as<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span></pre></td></tr><tr><td data-num="17"></td><td><pre>            <span class="token comment">//getProbe 可以理解为一个随机数，相当于随机找一个 cell</span></pre></td></tr><tr><td data-num="18"></td><td><pre>                <span class="token punctuation">(</span>a <span class="token operator">=</span> as<span class="token punctuation">[</span><span class="token function">getProbe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> m<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span></pre></td></tr><tr><td data-num="19"></td><td><pre>                <span class="token operator">!</span><span class="token punctuation">(</span>uncontended <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">cas</span><span class="token punctuation">(</span>v <span class="token operator">=</span> a<span class="token punctuation">.</span>value<span class="token punctuation">,</span> v <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre>                <span class="token comment">// 能走到这，说明 cell 没有初始化，那么就进行初始化</span></pre></td></tr><tr><td data-num="21"></td><td><pre>                <span class="token function">longAccumulate</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> uncontended<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token comment">//BASE 其实就是 base 变量在内存中的偏移量</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">casBase</span><span class="token punctuation">(</span><span class="token keyword">long</span> cmp<span class="token punctuation">,</span> <span class="token keyword">long</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token keyword">return</span> UNSAFE<span class="token punctuation">.</span><span class="token function">compareAndSwapLong</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> BASE<span class="token punctuation">,</span> cmp<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>这里的操作还是很简单的，就是首先判断能不能将 x 添加到 base 上，如果不能加到 base 上，先判断下 cells 有没有被初始化，如果被初始化了，就使用一个 getProbe () 函数随机数 &amp; m, 由于 cell 的长度一定是 2 的整数幂，因此 &amp; 相当于 %, 可以理解为哈希定位数组，如果定位的下标没有被初始化，那么久要执行 longAccumulate 了。</p><p>下面来看看 longAccumulate:</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">longAccumulate</span><span class="token punctuation">(</span><span class="token keyword">long</span> x<span class="token punctuation">,</span> <span class="token class-name">LongBinaryOperator</span> fn<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="2"></td><td><pre>                              <span class="token keyword">boolean</span> wasUncontended<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token comment">//h 可以理解做哈希值</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">int</span> h<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>h <span class="token operator">=</span> <span class="token function">getProbe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            <span class="token class-name">ThreadLocalRandom</span><span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// force initialization</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            h <span class="token operator">=</span> <span class="token function">getProbe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            wasUncontended <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">boolean</span> collide <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token comment">// True if last slot nonempty</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token class-name">Cell</span><span class="token punctuation">[</span><span class="token punctuation">]</span> as<span class="token punctuation">;</span> <span class="token class-name">Cell</span> a<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">;</span> <span class="token keyword">long</span> v<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>            <span class="token comment">// 判断下 cells 是不是完全没有初始化？</span></pre></td></tr><tr><td data-num="14"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>as <span class="token operator">=</span> cells<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> as<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>                <span class="token comment">// 如果不是完全没有初始化，就用 h 哈希一下定位数组下标</span></pre></td></tr><tr><td data-num="16"></td><td><pre>                <span class="token comment">// 如果定位的数组下标为 null</span></pre></td></tr><tr><td data-num="17"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">=</span> as<span class="token punctuation">[</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> h<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>cellsBusy <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token comment">// Try to attach new Cell</span></pre></td></tr><tr><td data-num="19"></td><td><pre>                         <span class="token comment">// 尝试直接初始化一个 Cell</span></pre></td></tr><tr><td data-num="20"></td><td><pre>                        <span class="token class-name">Cell</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cell</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// Optimistically create</span></pre></td></tr><tr><td data-num="21"></td><td><pre>                        <span class="token comment">// 这里是为了防止重复初始化</span></pre></td></tr><tr><td data-num="22"></td><td><pre>                        <span class="token comment">// 试想一下如果多个线程同时进入到这，那么只有当 cellsBusy 为 0, 并且 CAS 成功才能真正进行初始化</span></pre></td></tr><tr><td data-num="23"></td><td><pre>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>cellsBusy <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">casCellsBusy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>                            <span class="token keyword">boolean</span> created <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>                            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>               <span class="token comment">// Recheck under lock</span></pre></td></tr><tr><td data-num="26"></td><td><pre>                                <span class="token class-name">Cell</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rs<span class="token punctuation">;</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> j<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>                                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>rs <span class="token operator">=</span> cells<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>                                    <span class="token punctuation">(</span>m <span class="token operator">=</span> rs<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>                                    rs<span class="token punctuation">[</span>j <span class="token operator">=</span> <span class="token punctuation">(</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> h<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>                                    rs<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>                                    created <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>                                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>                            <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>                                <span class="token comment">// 这里初始化成功，将 cellsBusy 恢复</span></pre></td></tr><tr><td data-num="35"></td><td><pre>                                cellsBusy <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>                            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>created<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="38"></td><td><pre>                                <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>                            <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token comment">// 能进进入到这里的，肯定是 cas 失败，说明别的线程已经抢在他前面进行初始化了，直接进入下一轮循环</span></pre></td></tr><tr><td data-num="40"></td><td><pre>                        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>                    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>                    collide <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="44"></td><td><pre></pre></td></tr><tr><td data-num="45"></td><td><pre>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>wasUncontended<span class="token punctuation">)</span>       <span class="token comment">// CAS already known to fail</span></pre></td></tr><tr><td data-num="46"></td><td><pre>                    wasUncontended <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token comment">// Continue after rehash</span></pre></td></tr><tr><td data-num="47"></td><td><pre>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">cas</span><span class="token punctuation">(</span>v <span class="token operator">=</span> a<span class="token punctuation">.</span>value<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fn <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> v <span class="token operator">+</span> x <span class="token operator">:</span></pre></td></tr><tr><td data-num="48"></td><td><pre>                                             fn<span class="token punctuation">.</span><span class="token function">applyAsLong</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="49"></td><td><pre>                    <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">>=</span> NCPU <span class="token operator">||</span> cells <span class="token operator">!=</span> as<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="51"></td><td><pre>                    collide <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token comment">// At max size or stale</span></pre></td></tr><tr><td data-num="52"></td><td><pre>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>collide<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="53"></td><td><pre>                    collide <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cellsBusy <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">casCellsBusy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>cells <span class="token operator">==</span> as<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// Expand table unless stale</span></pre></td></tr><tr><td data-num="57"></td><td><pre>                        <span class="token comment">//2 倍扩容</span></pre></td></tr><tr><td data-num="58"></td><td><pre>                            <span class="token class-name">Cell</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cell</span><span class="token punctuation">[</span>n <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>                            <span class="token comment">// 迁移原数组</span></pre></td></tr><tr><td data-num="60"></td><td><pre>                            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="61"></td><td><pre>                                rs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> as<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="62"></td><td><pre>                            cells <span class="token operator">=</span> rs<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="63"></td><td><pre>                        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="64"></td><td><pre>                    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="65"></td><td><pre>                        cellsBusy <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="66"></td><td><pre>                    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="67"></td><td><pre>                    collide <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="68"></td><td><pre>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                   <span class="token comment">// Retry with expanded table</span></pre></td></tr><tr><td data-num="69"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="70"></td><td><pre>                h <span class="token operator">=</span> <span class="token function">advanceProbe</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="71"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="72"></td><td><pre>            <span class="token comment">// 进入到这里的，说明数组没有初始化，这里尝试去初始化整个数组</span></pre></td></tr><tr><td data-num="73"></td><td><pre>            <span class="token comment">// 依旧是要 CAS 成功才能进去初始化，这里还是用了 cells==as, 即保证数组未初始化</span></pre></td></tr><tr><td data-num="74"></td><td><pre>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cellsBusy <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> cells <span class="token operator">==</span> as <span class="token operator">&amp;&amp;</span> <span class="token function">casCellsBusy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="75"></td><td><pre>                <span class="token keyword">boolean</span> init <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="76"></td><td><pre>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>             </pre></td></tr><tr><td data-num="77"></td><td><pre>                    <span class="token comment">//  又来一波判断，确认数组 as 是不是为 null</span></pre></td></tr><tr><td data-num="78"></td><td><pre>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>cells <span class="token operator">==</span> as<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="79"></td><td><pre>                        <span class="token comment">// 初始为为 2</span></pre></td></tr><tr><td data-num="80"></td><td><pre>                        <span class="token class-name">Cell</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cell</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="81"></td><td><pre>                        <span class="token comment">// 将 0 或者 1 初始化为 x 值</span></pre></td></tr><tr><td data-num="82"></td><td><pre>                        rs<span class="token punctuation">[</span>h <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cell</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="83"></td><td><pre>                        cells <span class="token operator">=</span> rs<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="84"></td><td><pre>                        init <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="85"></td><td><pre>                    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="86"></td><td><pre>                <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="87"></td><td><pre>                    cellsBusy <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="88"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="89"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span>init<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="90"></td><td><pre>                <span class="token comment">// 如果初始化完成，直接跳出循环</span></pre></td></tr><tr><td data-num="91"></td><td><pre>                    <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="92"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="93"></td><td><pre>            <span class="token comment">// 进入到这里的，说明有个线程正在初始化整个数组，因此，尝试加到 base 上，如果成功就直接 break, 否则继续下次循环</span></pre></td></tr><tr><td data-num="94"></td><td><pre>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">casBase</span><span class="token punctuation">(</span>v <span class="token operator">=</span> base<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fn <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> v <span class="token operator">+</span> x <span class="token operator">:</span></pre></td></tr><tr><td data-num="95"></td><td><pre>                                        fn<span class="token punctuation">.</span><span class="token function">applyAsLong</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="96"></td><td><pre>                <span class="token keyword">break</span><span class="token punctuation">;</span>                          <span class="token comment">// Fall back on using base</span></pre></td></tr><tr><td data-num="97"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="98"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>这里有一个 for 循环，有三个分支:</p><ul><li>第一个分支，说明整个数组已经初始化，接下来其实又有几个小分支<ul><li>如果哈希定位到的数组下标没有初始化，则尝试 CAS 初始化</li><li>如果定位到的数组下标初始化了，尝试 CAS 添加</li></ul></li><li>第二个分支，说明整个数组都没有被初始化，此时需要初始化整个数组。</li><li>第三个分支，说明有其他线程正在第二个分支初始化，继续尝试能不能加到 base 上，如果不能则继续循环进入到第一个分支。</li></ul><h1 id="总结"><a class="anchor" href="#总结">#</a> 总结</h1><p><strong>LongAdder 中，有一个计组知识，即缓存伪共享和缓存行填充，jdk8 中提供了一个 Contented 注解就是先了缓存行填充，LongAddr 的思想有一种拆分的思想，其中不仅大量运用了 CAS, 并且还有一些小的优化，比如容量是 2 的整数幂可以使用 &amp; 代替 %, 加快运算。</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;介绍&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#介绍&quot;&gt;#&lt;/a&gt; 介绍&lt;/h1&gt;
&lt;p&gt;LongAdder 的 JDK8 种提供的一个针对 Long 类型的原子操作。&lt;/p&gt;
&lt;h1 id=&quot;核心原理&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;</summary>
      
    
    
    
    <category term="后端" scheme="https://guyouwyh.github.io/guyouwyh/categories/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Java" scheme="https://guyouwyh.github.io/guyouwyh/categories/%E5%90%8E%E7%AB%AF/Java/"/>
    
    <category term="Java并发" scheme="https://guyouwyh.github.io/guyouwyh/categories/%E5%90%8E%E7%AB%AF/Java/Java%E5%B9%B6%E5%8F%91/"/>
    
    
    <category term="Java" scheme="https://guyouwyh.github.io/guyouwyh/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Atomic原子类源码解析</title>
    <link href="https://guyouwyh.github.io/guyouwyh/2022/11/01/%E5%90%8E%E7%AB%AF/Java/Java%E5%B9%B6%E5%8F%91/Atomic%E5%8E%9F%E5%AD%90%E7%B1%BB%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <id>https://guyouwyh.github.io/guyouwyh/2022/11/01/%E5%90%8E%E7%AB%AF/Java/Java%E5%B9%B6%E5%8F%91/Atomic%E5%8E%9F%E5%AD%90%E7%B1%BB%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</id>
    <published>2022-11-01T09:19:19.501Z</published>
    <updated>2022-11-01T11:58:32.577Z</updated>
    
    <content type="html"><![CDATA[<p><strong>在解析 Atomic 源码之前，先要介绍一些前置知识，比如 CAS、Java 的 Unsafe 类等</strong></p><h1 id="cas"><a class="anchor" href="#cas">#</a> CAS</h1><p>相信乐观锁都听说过，那么乐观锁是什么呢？<br /> 乐观锁可以理解为，在线程操作共享变量的时候，读操作并不会加锁，到要进行写操作的时候才会 &quot;加锁&quot;, 这个加锁其实就是 CAS。<br />CAS (Compare And Swap), 从字面意思来解释，就是先比较和交换，通俗来说，就是我要改变的变量原来是什么样子的？如果原来的样子跟我所说的符合，那么就允许修改，如果跟我所说的不符合，修改失败。<br />当然，比较重要的一点是，Compare And Swap, 必须是原子操作，即比较和交换，要么同时执行成功，要么同时失败，操作不可再分隔。</p><p>那么在 Java 中乐观锁是怎么样应用的？或者说怎么实现乐观锁，在 concurrent 并发包中，提供了 Atomic 类，都是基于 CAS 操作进行的。</p><p><strong>下面说说 CAS 的优点:</strong></p><h2 id="cas优点"><a class="anchor" href="#cas优点">#</a> CAS 优点</h2><p>CAS 相当于无锁编程，如果是在 intel 处理器中，底层使用了原语指令 cmpxchg 实现了 CAS, 这样在少量线程并发操作中，性能会比加锁好。</p><h2 id="cas的可能会产生的问题"><a class="anchor" href="#cas的可能会产生的问题">#</a> CAS 的可能会产生的问题</h2><ol><li><p><mark>ABA 问题</mark><br />所谓的 ABA 问题，比如说两个线程 A 和 B,A 使用 CAS 修改了变量，然后 B 又使用 CAS 将值修改回去了，那么其实我们是感知不到变量被修改，也就是说只通过值的比较，就会造成 ABA 问题。<br /><mark>解决办法是使用加一个版本号，每次修改既要比较值也要比较版本号，每次修改版本号都会递增。</mark></p></li><li><p><mark>循环时间长导致开销大</mark><br />一般使用 CAS, 都会在一个循环中，一直重试，直到成功，那么如果一直重试，会导致 CPU 开销很大。<br /><mark>解决办法是限定自旋次数，也就是循环的次数，当循环到一定次数还没成功，就直接跳出。</mark></p></li><li><p><mark>只能保证一个变量的原子操作</mark><br />如果我们要替换的是一个对象，那么 CAS 可能无法完成，因为它只能保证一个变量的原子操作，在 Java 中提供了对一个对象的 CAS 操作。</p></li></ol><h1 id="unsafe类"><a class="anchor" href="#unsafe类">#</a> Unsafe 类</h1><p>Unsafe 这个类，提供了对操作系统内存管理等一些操作的接口，因此这个类非常危险，所以叫 Unsafe。<br />下面先看一下它的构造器:</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Unsafe</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">registerNatives</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token function">registerNatives</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span>Reflection</span><span class="token punctuation">.</span><span class="token function">registerMethodsToFilter</span><span class="token punctuation">(</span><span class="token class-name">Unsafe</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">"getUnsafe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">Unsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Unsafe</span> theUnsafe <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Unsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>可以看到，它的构造器是私有的，因此不能直接初始化这个类，可以通过反射获取这个类的 theUnsafe 变量。从而获取这个类。<br />关注这个类里面以 <code>compareAndSwap</code>  开头的方法</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token keyword">boolean</span> <span class="token function">compareAndSwapObject</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">,</span> <span class="token keyword">long</span> offset<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="2"></td><td><pre>                                                     <span class="token class-name">Object</span> expected<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>                                                     <span class="token class-name">Object</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token keyword">boolean</span> <span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">,</span> <span class="token keyword">long</span> offset<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>                                                  <span class="token keyword">int</span> expected<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>                                                  <span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre> </pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token keyword">boolean</span> <span class="token function">compareAndSwapLong</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">,</span> <span class="token keyword">long</span> offset<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre>                                                   <span class="token keyword">long</span> expected<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="12"></td><td><pre>                                                   <span class="token keyword">long</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>可以看到只提供了 Object、int、long 的方法。<br />这些方法都是本地方法，方法里有 4 个参数:</p><ol><li>要进行 CAS 的对象或者变量</li><li>要操作的对象或者变量在内存中的偏移量</li><li>期待更新的值</li><li>要替换的值</li></ol><p>那么有个问题，这个 offset 偏移量，怎么知道是多少呢？<br />Unsafe 类中也提供了一个本地方法帮助我们计算字段的偏移量</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">long</span> <span class="token function">objectFieldOffset</span><span class="token punctuation">(</span><span class="token class-name">Field</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>只要我们通过反射拿到 Field 对象，就能获取到字段的偏移量。</p><h1 id="atomicinteger类"><a class="anchor" href="#atomicinteger类">#</a> AtomicInteger 类</h1><p>先看一下 AtomicInteger 类的源码:</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AtomicInteger</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span> <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">6214790243416807050L</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>     <span class="token comment">// 这里获取了 Unsafe 对象</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Unsafe</span> unsafe <span class="token operator">=</span> <span class="token class-name">Unsafe</span><span class="token punctuation">.</span><span class="token function">getUnsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token comment">// 字段偏移量</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> valueOffset<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token comment">// 静态代码块初始化 valueOffset</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token comment">// 可以看到，就是调用了 unsafe 类中的 objectFieldOffset 计算字段的偏移量</span></pre></td></tr><tr><td data-num="13"></td><td><pre>            valueOffset <span class="token operator">=</span> unsafe<span class="token punctuation">.</span>objectFieldOffset</pre></td></tr><tr><td data-num="14"></td><td><pre>                <span class="token punctuation">(</span><span class="token class-name">AtomicInteger</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token comment">// 这个 value 就是我们传入的变量</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token comment">// 有参构造</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token keyword">public</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        value <span class="token operator">=</span> initialValue<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token keyword">public</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre> </pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        <span class="token keyword">return</span> value<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre></pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> newValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>        value <span class="token operator">=</span> newValue<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="37"></td><td><pre></pre></td></tr><tr><td data-num="38"></td><td><pre>   </pre></td></tr><tr><td data-num="39"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">lazySet</span><span class="token punctuation">(</span><span class="token keyword">int</span> newValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>        unsafe<span class="token punctuation">.</span><span class="token function">putOrderedInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> valueOffset<span class="token punctuation">,</span> newValue<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="42"></td><td><pre></pre></td></tr><tr><td data-num="43"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getAndSet</span><span class="token punctuation">(</span><span class="token keyword">int</span> newValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>        <span class="token keyword">return</span> unsafe<span class="token punctuation">.</span><span class="token function">getAndSetInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> valueOffset<span class="token punctuation">,</span> newValue<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="46"></td><td><pre></pre></td></tr><tr><td data-num="47"></td><td><pre> </pre></td></tr><tr><td data-num="48"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token keyword">int</span> expect<span class="token punctuation">,</span> <span class="token keyword">int</span> update<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>        <span class="token keyword">return</span> unsafe<span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> valueOffset<span class="token punctuation">,</span> expect<span class="token punctuation">,</span> update<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="51"></td><td><pre></pre></td></tr><tr><td data-num="52"></td><td><pre>   </pre></td></tr><tr><td data-num="53"></td><td><pre></pre></td></tr><tr><td data-num="54"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>        <span class="token keyword">return</span> unsafe<span class="token punctuation">.</span><span class="token function">getAndAddInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> valueOffset<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="57"></td><td><pre></pre></td></tr><tr><td data-num="58"></td><td><pre></pre></td></tr><tr><td data-num="59"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getAndDecrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>        <span class="token keyword">return</span> unsafe<span class="token punctuation">.</span><span class="token function">getAndAddInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> valueOffset<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="61"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="62"></td><td><pre></pre></td></tr><tr><td data-num="63"></td><td><pre>   </pre></td></tr><tr><td data-num="64"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getAndAdd</span><span class="token punctuation">(</span><span class="token keyword">int</span> delta<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="65"></td><td><pre>        <span class="token keyword">return</span> unsafe<span class="token punctuation">.</span><span class="token function">getAndAddInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> valueOffset<span class="token punctuation">,</span> delta<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="66"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="67"></td><td><pre></pre></td></tr><tr><td data-num="68"></td><td><pre>   </pre></td></tr><tr><td data-num="69"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="70"></td><td><pre>        <span class="token keyword">return</span> unsafe<span class="token punctuation">.</span><span class="token function">getAndAddInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> valueOffset<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="71"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="72"></td><td><pre></pre></td></tr><tr><td data-num="73"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">decrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="74"></td><td><pre>        <span class="token keyword">return</span> unsafe<span class="token punctuation">.</span><span class="token function">getAndAddInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> valueOffset<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="75"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="76"></td><td><pre></pre></td></tr><tr><td data-num="77"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">addAndGet</span><span class="token punctuation">(</span><span class="token keyword">int</span> delta<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="78"></td><td><pre>        <span class="token keyword">return</span> unsafe<span class="token punctuation">.</span><span class="token function">getAndAddInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> valueOffset<span class="token punctuation">,</span> delta<span class="token punctuation">)</span> <span class="token operator">+</span> delta<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="79"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="80"></td><td><pre></pre></td></tr><tr><td data-num="81"></td><td><pre></pre></td></tr><tr><td data-num="82"></td><td><pre>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="83"></td><td><pre>        <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="84"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="85"></td><td><pre></pre></td></tr><tr><td data-num="86"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="87"></td><td><pre>        <span class="token keyword">return</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="88"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="89"></td><td><pre></pre></td></tr><tr><td data-num="90"></td><td><pre></pre></td></tr><tr><td data-num="91"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="92"></td><td><pre>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="93"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="94"></td><td><pre></pre></td></tr><tr><td data-num="95"></td><td><pre></pre></td></tr><tr><td data-num="96"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">floatValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="97"></td><td><pre>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="98"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="99"></td><td><pre></pre></td></tr><tr><td data-num="100"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="101"></td><td><pre>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="102"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="103"></td><td><pre></pre></td></tr><tr><td data-num="104"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>AtomicInteger 类比较简单，其实就是在内部聚合了一个 Unsafe 对象，以及一个 value 存储值，valueoffset 存储 value 在内存中的偏移量。在类初始化的时候，在静态代码块中通过 unsafe 获取到 valueoffset 的值并保存，然后之后的所有操作其实都是使用 unsafe 类中的本地方法进行的。</p><p>剩下的 AtomicLong、AtomicBoolean、AtomicObject 也是一样的，都是使用 unsafe 类中的本地方法。需要注意的是 AtomicBoolean 其实是使用 Unsafe.compareAndSwapInt 方法进行 CAS 操作的。</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token class-name">AtomicBoolean</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> initialValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>        value <span class="token operator">=</span> initialValue <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">public</span> <span class="token class-name">AtomicBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">return</span> value <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> expect<span class="token punctuation">,</span> <span class="token keyword">boolean</span> update<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token keyword">int</span> e <span class="token operator">=</span> expect <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token keyword">int</span> u <span class="token operator">=</span> update <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token keyword">return</span> unsafe<span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> valueOffset<span class="token punctuation">,</span> e<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="atomicstampedreference和atomicmarkablereference"><a class="anchor" href="#atomicstampedreference和atomicmarkablereference">#</a> AtomicStampedReference 和 AtomicMarkableReference</h1><p>这两个类 CAS 比较的时候，不仅仅是比较值，还比较版本号，解决了 CAS 产生的 ABA 问题。</p><p>AtomicStrampedReference 源码如下:</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AtomicStampedReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// 创建了一个内部类 Pair</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>         <span class="token comment">// 引用</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">final</span> <span class="token class-name">T</span> reference<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token comment">// 版本号</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">final</span> <span class="token keyword">int</span> stamp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token keyword">private</span> <span class="token class-name">Pair</span><span class="token punctuation">(</span><span class="token class-name">T</span> reference<span class="token punctuation">,</span> <span class="token keyword">int</span> stamp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            <span class="token keyword">this</span><span class="token punctuation">.</span>reference <span class="token operator">=</span> reference<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token keyword">this</span><span class="token punctuation">.</span>stamp <span class="token operator">=</span> stamp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">T</span> reference<span class="token punctuation">,</span> <span class="token keyword">int</span> stamp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>reference<span class="token punctuation">,</span> stamp<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> pair<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>   <span class="token comment">// 在构造函数中，直接将对象和初始版本号包装成 Pair</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token keyword">public</span> <span class="token class-name">AtomicStampedReference</span><span class="token punctuation">(</span><span class="token class-name">V</span> initialRef<span class="token punctuation">,</span> <span class="token keyword">int</span> initialStamp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        pair <span class="token operator">=</span> <span class="token class-name">Pair</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>initialRef<span class="token punctuation">,</span> initialStamp<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">getReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token keyword">return</span> pair<span class="token punctuation">.</span>reference<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        <span class="token keyword">return</span> pair<span class="token punctuation">.</span>stamp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre>    <span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> stampHolder<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>        <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> pair <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pair<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>        stampHolder<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> pair<span class="token punctuation">.</span>stamp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>        <span class="token keyword">return</span> pair<span class="token punctuation">.</span>reference<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="38"></td><td><pre></pre></td></tr><tr><td data-num="39"></td><td><pre>    </pre></td></tr><tr><td data-num="40"></td><td><pre></pre></td></tr><tr><td data-num="41"></td><td><pre>  <span class="token comment">//CAS 操作，四个参数，两个两个一对</span></pre></td></tr><tr><td data-num="42"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token class-name">V</span>   expectedReference<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="43"></td><td><pre>                                 <span class="token class-name">V</span>   newReference<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="44"></td><td><pre>                                 <span class="token keyword">int</span> expectedStamp<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="45"></td><td><pre>                                 <span class="token keyword">int</span> newStamp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="46"></td><td><pre></pre></td></tr><tr><td data-num="47"></td><td><pre>            <span class="token comment">// 获取构造函数初始化时候包装的 Pair 对象                        </span></pre></td></tr><tr><td data-num="48"></td><td><pre>        <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> current <span class="token operator">=</span> pair<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>        <span class="token keyword">return</span></pre></td></tr><tr><td data-num="50"></td><td><pre>        <span class="token comment">// 比较期待的值是否一致</span></pre></td></tr><tr><td data-num="51"></td><td><pre>            expectedReference <span class="token operator">==</span> current<span class="token punctuation">.</span>reference <span class="token operator">&amp;&amp;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>            expectedStamp <span class="token operator">==</span> current<span class="token punctuation">.</span>stamp <span class="token operator">&amp;&amp;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>            <span class="token comment">// 如果要修改的值和版本号与原来的一样，直接返回 true</span></pre></td></tr><tr><td data-num="54"></td><td><pre>            <span class="token punctuation">(</span><span class="token punctuation">(</span>newReference <span class="token operator">==</span> current<span class="token punctuation">.</span>reference <span class="token operator">&amp;&amp;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>              newStamp <span class="token operator">==</span> current<span class="token punctuation">.</span>stamp<span class="token punctuation">)</span> <span class="token operator">||</span></pre></td></tr><tr><td data-num="56"></td><td><pre>              <span class="token comment">// 如果是修改新值，那么进入 casPair 中</span></pre></td></tr><tr><td data-num="57"></td><td><pre>             <span class="token function">casPair</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> <span class="token class-name">Pair</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>newReference<span class="token punctuation">,</span> newStamp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="59"></td><td><pre></pre></td></tr><tr><td data-num="60"></td><td><pre>    </pre></td></tr><tr><td data-num="61"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">V</span> newReference<span class="token punctuation">,</span> <span class="token keyword">int</span> newStamp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="62"></td><td><pre>        <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> current <span class="token operator">=</span> pair<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="63"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newReference <span class="token operator">!=</span> current<span class="token punctuation">.</span>reference <span class="token operator">||</span> newStamp <span class="token operator">!=</span> current<span class="token punctuation">.</span>stamp<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="64"></td><td><pre>            <span class="token keyword">this</span><span class="token punctuation">.</span>pair <span class="token operator">=</span> <span class="token class-name">Pair</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>newReference<span class="token punctuation">,</span> newStamp<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="65"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="66"></td><td><pre></pre></td></tr><tr><td data-num="67"></td><td><pre></pre></td></tr><tr><td data-num="68"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">attemptStamp</span><span class="token punctuation">(</span><span class="token class-name">V</span> expectedReference<span class="token punctuation">,</span> <span class="token keyword">int</span> newStamp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="69"></td><td><pre>        <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> current <span class="token operator">=</span> pair<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="70"></td><td><pre>        <span class="token keyword">return</span></pre></td></tr><tr><td data-num="71"></td><td><pre>            expectedReference <span class="token operator">==</span> current<span class="token punctuation">.</span>reference <span class="token operator">&amp;&amp;</span></pre></td></tr><tr><td data-num="72"></td><td><pre>            <span class="token punctuation">(</span>newStamp <span class="token operator">==</span> current<span class="token punctuation">.</span>stamp <span class="token operator">||</span></pre></td></tr><tr><td data-num="73"></td><td><pre>             <span class="token function">casPair</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> <span class="token class-name">Pair</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>expectedReference<span class="token punctuation">,</span> newStamp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="74"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="75"></td><td><pre></pre></td></tr><tr><td data-num="76"></td><td><pre></pre></td></tr><tr><td data-num="77"></td><td><pre></pre></td></tr><tr><td data-num="78"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span></span>Unsafe</span> UNSAFE <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span></span>Unsafe</span><span class="token punctuation">.</span><span class="token function">getUnsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="79"></td><td><pre>     <span class="token comment">// 直接获取 pair 的偏移量</span></pre></td></tr><tr><td data-num="80"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> pairOffset <span class="token operator">=</span></pre></td></tr><tr><td data-num="81"></td><td><pre>        <span class="token function">objectFieldOffset</span><span class="token punctuation">(</span>UNSAFE<span class="token punctuation">,</span> <span class="token string">"pair"</span><span class="token punctuation">,</span> <span class="token class-name">AtomicStampedReference</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="82"></td><td><pre>   <span class="token comment">// 这里的关键来了，将新值和新版本号包装成 Pair 后，直接调用 Unsafe 的方法进行替换</span></pre></td></tr><tr><td data-num="83"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">casPair</span><span class="token punctuation">(</span><span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> cmp<span class="token punctuation">,</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="84"></td><td><pre>        <span class="token keyword">return</span> UNSAFE<span class="token punctuation">.</span><span class="token function">compareAndSwapObject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> pairOffset<span class="token punctuation">,</span> cmp<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="85"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="86"></td><td><pre></pre></td></tr><tr><td data-num="87"></td><td><pre><span class="token comment">// 计算偏移量，也是使用了 unsafe 的本地方法</span></pre></td></tr><tr><td data-num="88"></td><td><pre>    <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">objectFieldOffset</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span></span>Unsafe</span> UNSAFE<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="89"></td><td><pre>                                  <span class="token class-name">String</span> field<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> klazz<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="90"></td><td><pre>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="91"></td><td><pre>            <span class="token keyword">return</span> UNSAFE<span class="token punctuation">.</span><span class="token function">objectFieldOffset</span><span class="token punctuation">(</span>klazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="92"></td><td><pre>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchFieldException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="93"></td><td><pre>            <span class="token comment">// Convert Exception to corresponding Error</span></pre></td></tr><tr><td data-num="94"></td><td><pre>            <span class="token class-name">NoSuchFieldError</span> error <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchFieldError</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="95"></td><td><pre>            error<span class="token punctuation">.</span><span class="token function">initCause</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="96"></td><td><pre>            <span class="token keyword">throw</span> error<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="97"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="98"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="99"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>AtomicMarkableReference 源码分析:</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AtomicMarkableReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">final</span> <span class="token class-name">T</span> reference<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">final</span> <span class="token keyword">boolean</span> mark<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">private</span> <span class="token class-name">Pair</span><span class="token punctuation">(</span><span class="token class-name">T</span> reference<span class="token punctuation">,</span> <span class="token keyword">boolean</span> mark<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            <span class="token keyword">this</span><span class="token punctuation">.</span>reference <span class="token operator">=</span> reference<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            <span class="token keyword">this</span><span class="token punctuation">.</span>mark <span class="token operator">=</span> mark<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">T</span> reference<span class="token punctuation">,</span> <span class="token keyword">boolean</span> mark<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>reference<span class="token punctuation">,</span> mark<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>AtomicMarkableReference 和 AtomicStampedReference 的区别只是 stamp 类型的区别，前者是 boolean, 后者是 int, 仅此而已。</p><h1 id="atomicintegerfieldupdater"><a class="anchor" href="#atomicintegerfieldupdater">#</a> AtomicIntegerFieldUpdater</h1><p>字面意思可以理解为，原子字段更新器，这个类的出现是为了去对已经存在的类中的变量进行原子操作。<br />源码解析:</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">protected</span> <span class="token class-name">AtomicIntegerFieldUpdater</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>先看构造方法，使用了权限修饰符 protected 进行修饰，也就是说明不能直接初始化对象，那么该类一定提供了一个静态方法来让我们获得这个对象。</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token annotation punctuation">@CallerSensitive</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">></span></span> <span class="token class-name">AtomicIntegerFieldUpdater</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">></span></span> <span class="token function">newUpdater</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">></span></span> tclass<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>                                                              <span class="token class-name">String</span> fieldName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AtomicIntegerFieldUpdaterImpl</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre>            <span class="token punctuation">(</span>tclass<span class="token punctuation">,</span> fieldName<span class="token punctuation">,</span> <span class="token class-name">Reflection</span><span class="token punctuation">.</span><span class="token function">getCallerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>可以看到，又 new 了一个实现类，先看参数，第一个是类的 class 对象，第二个的字段名。</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">AtomicIntegerFieldUpdaterImpl</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> tclass<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="2"></td><td><pre>                                      <span class="token keyword">final</span> <span class="token class-name">String</span> fieldName<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>                                      <span class="token keyword">final</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> caller<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>            <span class="token keyword">final</span> <span class="token class-name">Field</span> field<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>            <span class="token keyword">final</span> <span class="token keyword">int</span> modifiers<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>                field <span class="token operator">=</span> <span class="token class-name">AccessController</span><span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="8"></td><td><pre>                    <span class="token keyword">new</span> <span class="token class-name">PrivilegedExceptionAction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Field</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>                        <span class="token keyword">public</span> <span class="token class-name">Field</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchFieldException</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>                            <span class="token keyword">return</span> tclass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>fieldName<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>                        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>                    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>                modifiers <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>                <span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>misc<span class="token punctuation">.</span></span>ReflectUtil</span><span class="token punctuation">.</span><span class="token function">ensureMemberAccess</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="16"></td><td><pre>                    caller<span class="token punctuation">,</span> tclass<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> modifiers<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>                <span class="token class-name">ClassLoader</span> cl <span class="token operator">=</span> tclass<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>                <span class="token class-name">ClassLoader</span> ccl <span class="token operator">=</span> caller<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ccl <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>ccl <span class="token operator">!=</span> cl<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>                    <span class="token punctuation">(</span><span class="token punctuation">(</span>cl <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">isAncestor</span><span class="token punctuation">(</span>cl<span class="token punctuation">,</span> ccl<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>                    <span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>misc<span class="token punctuation">.</span></span>ReflectUtil</span><span class="token punctuation">.</span><span class="token function">checkPackageAccess</span><span class="token punctuation">(</span>tclass<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PrivilegedActionException</span> pae<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>pae<span class="token punctuation">.</span><span class="token function">getException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>            <span class="token comment">// 字段必须是 int 类型</span></pre></td></tr><tr><td data-num="29"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Must be integer type"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>       <span class="token comment">// 修饰符必须是 volatile</span></pre></td></tr><tr><td data-num="32"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token function">isVolatile</span><span class="token punctuation">(</span>modifiers<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="33"></td><td><pre>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Must be volatile type"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre></pre></td></tr><tr><td data-num="35"></td><td><pre>      </pre></td></tr><tr><td data-num="36"></td><td><pre>            <span class="token keyword">this</span><span class="token punctuation">.</span>cclass <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token function">isProtected</span><span class="token punctuation">(</span>modifiers<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>                           tclass<span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>caller<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>                           <span class="token operator">!</span><span class="token function">isSamePackage</span><span class="token punctuation">(</span>tclass<span class="token punctuation">,</span> caller<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="39"></td><td><pre>                          <span class="token operator">?</span> caller <span class="token operator">:</span> tclass<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>            <span class="token keyword">this</span><span class="token punctuation">.</span>tclass <span class="token operator">=</span> tclass<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>            <span class="token keyword">this</span><span class="token punctuation">.</span>offset <span class="token operator">=</span> <span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">objectFieldOffset</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>从源码中可以知道，这个类做了一些限制条件，比如更新必须是 int 类型变量，修饰符必须有 volatile, 除了这些限制条件外，基本原理与 AtomicInteger 一样。</p><h1 id="总结"><a class="anchor" href="#总结">#</a> 总结</h1><p>对于 Atomic 原子类来说，底层的原理其实很好理解，就是调用了 Unsafe 中的本地方法，实现 CAS。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;在解析 Atomic 源码之前，先要介绍一些前置知识，比如 CAS、Java 的 Unsafe 类等&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;cas&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#cas&quot;&gt;#&lt;/a&gt; CAS&lt;/h1&gt;
&lt;p&gt;相信乐观</summary>
      
    
    
    
    <category term="后端" scheme="https://guyouwyh.github.io/guyouwyh/categories/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Java" scheme="https://guyouwyh.github.io/guyouwyh/categories/%E5%90%8E%E7%AB%AF/Java/"/>
    
    <category term="Java并发" scheme="https://guyouwyh.github.io/guyouwyh/categories/%E5%90%8E%E7%AB%AF/Java/Java%E5%B9%B6%E5%8F%91/"/>
    
    
    <category term="Java" scheme="https://guyouwyh.github.io/guyouwyh/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JMM和volatile的一些理解</title>
    <link href="https://guyouwyh.github.io/guyouwyh/2022/11/01/%E5%90%8E%E7%AB%AF/Java/Java%E5%B9%B6%E5%8F%91/JMM%E5%92%8Cvolatile%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3/"/>
    <id>https://guyouwyh.github.io/guyouwyh/2022/11/01/%E5%90%8E%E7%AB%AF/Java/Java%E5%B9%B6%E5%8F%91/JMM%E5%92%8Cvolatile%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3/</id>
    <published>2022-11-01T04:10:48.805Z</published>
    <updated>2022-11-01T09:15:50.212Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jmm是什么"><a class="anchor" href="#jmm是什么">#</a> JMM 是什么？</h1><p>对于学 Java 多线程的人来说，一定听说过 JMM, 那么 JMM 到底是什么呢？JMM 全称 (<ins>Java Memory Model</ins>) 即 Java 内存模型。它是 Java 的一套规范，对上，是 JVM 和开发者之间的约定，对下，是 JVM 和编译器、CPU 之间的约定。</p><h1 id="jmm是作用是什么"><a class="anchor" href="#jmm是作用是什么">#</a> JMM 是作用是什么？</h1><p>JMM 是作用主要是明确在多线程环境下，什么时候需要重排序，什么时候不需要重排序。为了更好的了解 JMM, 先介绍一下内存的可见性问题和重排序问题。</p><h1 id="内存可见性问题"><a class="anchor" href="#内存可见性问题">#</a> 内存可见性问题</h1><p>首先来说说，为什么会存在内存可见性问题？举个栗子，假设是一个 2 核 CPU, 在 x86 架构下它的缓存布局如下:<br /><img data-src="https://raw.githubusercontent.com/guyouwyh/picture/main/20221101160705.png" alt="" /><br />CPU 有 3 级缓存，因为存在 CPU 缓存一致性协议 MESI, 多个 CPU 缓存不会出现不同步问题，因此不会有不可见问题。<br />但是还有个问题就是：使用缓存一致性协议，会对性能有很大的损耗，因此 CPU 的设计者们又进行了优化，比如在 CPU 计算单元与 L1 缓存之间又加上了 LoadBuufer 和 StoreBuffer。<br />L1、L2、L3 缓存与主存之间，由于有缓存一致性协议的缘故，是同步的，但是 L1 和 StoreBuffer 和 LoadBuffer 之间并不是同步的，通俗来说 ++&quot;往内存中写入一个变量，这个变量会先被写入到 StoreBuffer 中，稍后异步写入 L1 缓存中，同时同步写入主内存中&quot;++。<br />基于这个原因，如果我们在引入 StoreBuffer 之后，CPU 读取变量时，直接从缓存中读取，则可能出现 StoreBuffer 中存在已经修改的变量，但是还未同步到缓存中，因此 CPU 会先从 StoreBuffer 中读取，这样保证了单 CPU 顺序执行指令过程的可见性。 这种机制也被称为 Store Fowarding。</p><p>但是，如果我们站在操作系统内核的角度下看 CPU 缓存模型是这样的:<br /><img data-src="https://raw.githubusercontent.com/guyouwyh/picture/main/20221101162224.png" alt="" /></p><p>然后 JVM 就将这种模型抽象成了 JMM 模型:<br /><img data-src="https://raw.githubusercontent.com/guyouwyh/picture/main/20221101162419.png" alt="" /></p><h1 id="重排序"><a class="anchor" href="#重排序">#</a> 重排序</h1><p>重排序由三个分类:</p><ul><li>编译器重排序：对于没有先后以来关系的语句，编译器可以重新调整语句的执行顺序</li><li>CPU 指令重排序：在指令级别，让没有以来关系的多条指令并行</li><li>CPU 内存重排序: CPU 有自己的缓存，执行的执行顺序和写入主内存的顺序不完全一致<br />一般而言，第三类就是造成内存可见性的主要原因。<br />举个例子，如果有两个线程 A 和 B。有一个全局变量 X=0, 如果线程 A 先修改了 X=1, 但是此时，由于要先写入 StoreBuffer, 此时并没有刷新到主内存，主内存中的 X 还是等于 0, 此时线程 B 看到的 X 还是 0。<br />将这种重排序称为内存重排序，会造成内存可见性问题。</li></ul><p>如果站在开发者的角度来看，肯定是希望不要有任何重排序，这样写内存的顺序也会跟代码顺序一样。<br />但是，如果站在 CPU 的角度来看，会尽可能的进行重排序，提升运行效率。<br />这时候就产生了一个问题，重排序要有什么原则？要在什么场景下进行重排序？又或者说在什么场景下不能重排序？这相当于是对于开发者和 CPU 之间的一个约定。</p><h2 id="单线程程序的重排序规则"><a class="anchor" href="#单线程程序的重排序规则">#</a> 单线程程序的重排序规则</h2><p>对于单线程程序来说，只要没有产生数据依赖性，也就是操作 B 不依赖于操作 A, 那么 CPU 就可以任意重排序，因为最终产生的结果并不会改变。从开发者的角度来看，这样代码从头执行到尾，这就是 as-if-serial 语义，编译器可和 CPU 或许因为运行效率而做了重排序，但是，开发者感知不到，这样就不会产生内存可见性原因.</p><h2 id="多线程重排序规则"><a class="anchor" href="#多线程重排序规则">#</a> 多线程重排序规则</h2><p>对于多线程来说，编译器和 CPU 只能保证单个线程的 as-if-serial 语义，但是，如果多个线程操作了共享变量，对于这种影响，编译期和 CPU 并不会考虑，也就产生了可见性的问题。那么为了解决在多线程的情况下的重排序问题，也就衍生出来了另外一种规则 ----<span class="rainbow">happen-before</span></p><p>首先介绍为什么会有 happen-before。<br />为了明确定义在多线程场景下，什么时候可以重排序，什么时候不能重排序，Java 引入了 JMM, 这只是一套规范，但是，如何去描述这个规范呢？JMM 就引入了 happen-before, 使用 happen-before 去描述这两个操作之间的内存可见性。</p><p>那么 happen-before 究竟是什么呢？<br />顾名思义，happen-before 也就是发生在什么之前，如果 A happen-before B, 那么 B 应该清楚的知道 A 的所作所为，即 A 的执行结果必须对 B 可见，保证了跨线程的内存可见性。<br />然而，happen-before 并不代表 A 一定在 B 之前执行，但是如果 A 在 B 之前执行，那么 A 的结果一定对 B 可见，也就是定义了内存可见性的约束。<br />JMM 对开发者做出了一系列承诺:</p><ol><li>单线程中的每个操作，happen-before 对应线程中任意后续操作，即 as-if-serial 语义保证</li><li>对 volatile 变量的写入，happen-before 对应后续对这个变量的读取</li><li>对 synchronized 的解锁，happen-before 对应后续对这个锁的加锁。</li><li>如果 A happen-before B, B happen-before C , 那么 A happen-before C (即具有传递性)</li></ol><p>这样也就保证了内存的可见性，但是，在操作系统底层是怎么保证的呢？这就要说说内存屏障了。</p><h1 id="内存屏障"><a class="anchor" href="#内存屏障">#</a> 内存屏障</h1><p>为了禁止编译器重排序和 CPU 重排序，在编译器和 CPU 层面都有对应的指令，也就是内存屏障 (Memory Barrier). 这也正是 JMM 和 happen-before 规则的底层实现原理。</p><p>编译器的内存屏障，只是为了告诉编译器不要对指令进行重排序。CPU 并不会感知编译器中内存屏障的存在</p><p>而 CPU 的内存屏障是 CPU 提供的，可以由开发者显式调用。</p><h2 id="cpu中的内存屏障"><a class="anchor" href="#cpu中的内存屏障">#</a> CPU 中的内存屏障</h2><p>在理论层面，可以把基本的 CPU 内存屏障分为 4 种:</p><ol><li>LoadLoad: 禁止读和读重排序</li><li>StoreStore: 禁止写和写的重排序</li><li>LoadStore: 禁止读和写的重排序</li><li>StoreLoad: 禁止写和读的重排序</li></ol><h2 id="jdk中的内存屏障"><a class="anchor" href="#jdk中的内存屏障">#</a> JDK 中的内存屏障</h2><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">loadFence</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre> </pre></td></tr><tr><td data-num="3"></td><td><pre> <span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">storeFence</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre> <span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">fullFence</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>可以看到，在 Unsafe 类中，提供了三种内存屏障，这三种内存屏障与 CPU 内存屏障的对应关系如下:<br /><span class="blue">loadFench = LoadLoad+ LoadSotre</span></p><p><span class="blue">storeFench = StoreStore + LoadStore</span></p><p><span class="blue">FullFench  = loadFence + storeFench + StoreLoad</span></p><h2 id="内存屏障的应用-volatile"><a class="anchor" href="#内存屏障的应用-volatile">#</a> 内存屏障的应用 --volatile</h2><p>相信大家都知道 volatile 这个关键字。valtile 有如下作用:</p><ul><li><p><mark>解决 64 位的写入问题</mark><br /> JVM 的规范并没有要求 64 位的 long 或者 double 的写入是原子的。在 32 位的机器上，一个 64 位的变量写入可能被拆分成两个 32 位的写操作来执行。这样一来，读取的线程就可能读到一半的值。解决办法是在 long 前面加上 volatile 关键字。</p></li><li><p><mark>解决内存可见性问题</mark><br />使用 volatile 关键字修饰的变量，会立刻从本地内存中刷新到共享内存中，保证了内存的可见性。</p></li><li><p><mark>解决重排序问题</mark><br />在使用 DCL, 即双重检查锁的时候，变量需要声明为 volatle, 这里也是为了防止指令重排序。<br />当我们 new 一个对象的时候，其实会发生三个步骤:</p></li></ul><ol><li>在堆中开辟一段空间</li><li>在这段空间 (内存) 上初始化成员变量</li><li>将引用指向这段空间的地址</li></ol><p>如果将步骤 2 和步骤 3 重排序了，获取的对象将会是未初始化的对象。这就会造成一些很严重的问题。</p><p>事实上，volatile 关键字底层就是使用了内存屏障。<br /><strong>1. 在 volatile 写操作前面插入一个 StoreStore 屏障。保证 volatile 写操作不会和之前的写操作重排序<br /> 2. 在 volatile 写操作后插入一个 StoreLoad 屏障，保证 volatile 写操作不会和之后的读操作重排序<br /> 3. 在 volatile 读操作后面插入一个 LoadLoad 屏障和 LoadStore 屏障，保证 volatile 读操作不会和之后的读操作、写操作重排序</strong></p><h1 id="总结"><a class="anchor" href="#总结">#</a> 总结</h1><p><strong>通俗来说，JMM 其实就是 Java 提供的一种内存模型，每个线程都有自己的本地缓存，所有线程都有一个共享内存，本地缓存中的变量相当于是共享内存中变量的一个副本，当我们修改一个变量的时候，事实上会直接修改本地缓存中的变量，并不会立即刷新到共享内存中，这样就导致了多个线程之间不可见问题。<br />如果站在我们开发者的角度来说，可以使用 synchronized、volatile、final 去解决重排序以及可见性问题。<br />但是如果站在 JVM 的角度来说，它其实是通过 JMM 的 happen-before 规则来解决的。<br />更深层次一点，站在 CPU 层面来说，主要是通过内存屏障来解决的。</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;jmm是什么&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#jmm是什么&quot;&gt;#&lt;/a&gt; JMM 是什么？&lt;/h1&gt;
&lt;p&gt;对于学 Java 多线程的人来说，一定听说过 JMM, 那么 JMM 到底是什么呢？JMM 全称 (&lt;ins&gt;Java Memory M</summary>
      
    
    
    
    <category term="后端" scheme="https://guyouwyh.github.io/guyouwyh/categories/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Java" scheme="https://guyouwyh.github.io/guyouwyh/categories/%E5%90%8E%E7%AB%AF/Java/"/>
    
    <category term="Java并发" scheme="https://guyouwyh.github.io/guyouwyh/categories/%E5%90%8E%E7%AB%AF/Java/Java%E5%B9%B6%E5%8F%91/"/>
    
    
    <category term="Java" scheme="https://guyouwyh.github.io/guyouwyh/tags/Java/"/>
    
  </entry>
  
</feed>
